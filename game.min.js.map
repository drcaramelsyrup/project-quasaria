{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/assets.js","src/objects/AreaTransitionWindow.js","src/objects/Argument.js","src/objects/ArgumentManager.js","src/objects/BattleUi.js","src/objects/Card.js","src/objects/Clickable.js","src/objects/ConversationManager.js","src/objects/DialogueWindow.js","src/objects/HealthBar.js","src/objects/Icon.js","src/objects/MemoryBankWindow.js","src/objects/NPC.js","src/objects/Placeable.js","src/objects/Player.js","src/objects/Room.js","src/objects/SaveButton.js","src/objects/Scrollbar.js","src/objects/Tactic.js","src/objects/Toast.js","src/states/Battleground.js","src/states/Boot.js","src/states/Credits.js","src/states/Game.js","src/states/GameOver.js","src/states/MainMenu.js","src/states/Preloader.js","src/states/index.js","src/utils/CustomActions.js","static/assets/areas.json","static/assets/items.json","static/assets/npcs.json","static/assets/tactics.json","static/assets/textstyles.json"],"names":[],"mappingspvTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfrgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltalJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphlvzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"game.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * `app` module\n * ============\n *\n * Provides the game initialization routine.\n */\n\n'use strict';\n\n// Import game states.\nvar states = require('./states');\n\nexports.init = function () {\n  var game = new Phaser.Game(800, 600, Phaser.AUTO);\n\n  // Dynamically add all required game states.\n  Object\n    .keys(states)\n    .forEach(function (key) {\n      game.state.add(key, states[key]);\n    });\n\n  game.state.start('Boot');\n\n  return game;\n};\n","/*\n * `assets` module\n * ===============\n *\n * Declares static asset packs to be loaded using the `Phaser.Loader#pack`\n * method. Use this module to declare game assets.\n */\n\n'use strict';\n\n// -- Splash screen assets used by the Preloader.\nexports.boot = [{\n  key: 'splash-screen',\n  type: 'image'\n}, {\n  key: 'progress-bar',\n  type: 'image'\n}];\n\nexports.main_menu = [{\n  key: 'quasaria-logo-MM',\n  type: 'image'\n}, {\n  key: 'continueButton',\n  type: 'image'\n}, {\n  key: 'menu_screen',\n  type: 'image',\n  url: 'backgrounds/menu_screen_scaled.png'\n}];\n\n\n// -- General assets used throughout the game.\nexports.game = [{\n  key: 'quasaria-logo',\n  type: 'image'\n}, {\n  key: 'shuttle',\n  type: 'image',\n  url: 'backgrounds/shuttle.png'\n}, {\n  key: 'hangar',\n  type: 'image',\n  url: 'backgrounds/hangar.png'\n}, {\n  key: 'medbay',\n  type: 'image',\n  url: 'backgrounds/medbay.png'\n}, {\n  key: 'listener',\n  type: 'image',\n  url: 'items/listener.png'\n}, {\n  key: 'note',\n  type: 'image',\n  url: 'items/note.png'\n}, {\n  key: 'biologistApproval',\n  type: 'image',\n  url: 'avatars/talvine.png'\n}, {\n  key: 'psychologistApproval',\n  type: 'image',\n  url: 'avatars/valken.png'\n}, {\n  key: 'shuttle-placeable',\n  type: 'image',\n  url: 'items/shuttle-placeable.png'\n}, {\n  key: 'vesper-npc',\n  type: 'image',\n  url: 'npcs/vesper.png'\n}, {\n  key: 'talvine-npc',\n  type: 'image',\n  url: 'npcs/talvine.png'\n}, {\n  key: 'valken-npc',\n  type: 'image',\n  url: 'npcs/valken.png'\n}, {\n  key: 'gleaming-shoal-npc',\n  type: 'image',\n  url: 'npcs/gleaming-shoal.png'\n}];\n\n// -- UI-specific assets.\nexports.ui = [{\n  key: 'dialogue-choice-button',\n  type: 'image',\n  url: 'ui/dialogue-choice-button.png'\n}, {\n  key: 'dialogue-panel',\n  type: 'image',\n  url: 'ui/dialogue-panel.png'\n}, {\n  key: 'toast',\n  type: 'image',\n  url: 'ui/toast.png'\n}, {\n  key: 'memory-bank-button',\n  type: 'image',\n  url: 'ui/memory-bank-button.png'\n}, {\n  key: 'memory-bank-icon',\n  type: 'image',\n  url: 'ui/memory-bank-icon.png'\n}, {\n  key: 'memory-bank-icon-mask',\n  type: 'image',\n  url: 'ui/memory-bank-icon-mask.png'\n}, {\n  key: 'memory-bank-next',\n  type: 'image',\n  url: 'ui/memory-bank-next.png'\n}, {\n  key: 'memory-bank',\n  type: 'image',\n  url: 'ui/memory-bank.png'\n}, {\n  key: 'saveButton',\n  type: 'image'\n}, {\n  key: 'button',\n  type: 'image',\n  url: 'ui/button.png'\n}, {\n  key: 'battle-background',\n  type: 'image',\n  url: 'ui/battle-background.png'\n}, {\n  key: 'battle-overlay',\n  type: 'image',\n  url: 'ui/battle-overlay-scaled.png'\n}, {\n  key: 'memory-bank-icon-fill',\n  type: 'image',\n  url: 'ui/memory-bank-icon-fill.png'\n}, {\n  key: 'companion-icon',\n  type: 'image',\n  url: 'ui/companion-icon.png'\n}, {\n  key: 'enemy-arg-icon',\n  type: 'image',\n  url: 'ui/enemy-arg-icon.png'\n}];\n\n// -- Conversation jsons and avatars.\nexports.conversations = [{\n  key: 'prologue01',\n  type: 'json',\n  url: 'conversations/prologue01.json'\n}, {\n  key: 'prologue02',\n  type: 'json',\n  url: 'conversations/prologue02.json'\n}, {\n  key: 'vesper01',\n  type: 'json',\n  url: 'conversations/vesper01.json'\n}, {\n  key: 'talvine01',\n  type: 'json',\n  url: 'conversations/talvine01.json'\n}, {\n  key: 'valken01',\n  type: 'json',\n  url: 'conversations/valken01.json'\n}, {\n  key: 'gleaming-shoal01',\n  type: 'json',\n  url: 'conversations/gleaming-shoal01.json'\n}, {\n  key: 'mysterious-voice',\n  type: 'image',\n  url: 'avatars/mysterious-voice.png'\n}, {\n  key: 'kismet',\n  type: 'image',\n  url: 'avatars/kismet.png'\n}, {\n  key: 'gleaming-shoal',\n  type: 'image',\n  url: 'avatars/gleaming-shoal.png'\n}, {\n  key: 'gleaming-shoal-portrait',\n  type: 'image',\n  url: 'avatars/gleaming-shoal-portrait.png'\n}, {\n  key: 'unknown-alien',\n  type: 'image',\n  url: 'avatars/gleaming-shoal-silhouette.png'\n}, {\n  key: 'vesper',\n  type: 'image',\n  url: 'avatars/vesper.png'\n}, {\n  key: 'talvine',\n  type: 'image',\n  url: 'avatars/talvine.png'\n}, {\n  key: 'valken',\n  type: 'image',\n  url: 'avatars/valken.png'\n}, {\n  key: 'invisible',\n  type: 'image',\n  url: 'avatars/invisible.png'\n}];\n\n// -- Sound effects and background music\nexports.sounds = [{\n  key: 'sunrise-from-orbit',\n  type: 'audio',\n  urls: ['music/Sunrise From Orbit (Demo).mp3']\n}, {\n  key: 'menu-theme-terraform',\n  type: 'audio',\n  urls: ['music/Terraforming-Begins_Looping.mp3']\n}, {\n  key: 'off-limits',\n  type: 'audio',\n  urls: ['music/Sector-Off-Limits_Looping.mp3']\n}, {\n  key: 'puzzle1',\n  type: 'audio',\n  urls: ['music/Puzzle-Game_Looping.mp3']\n}, {\n  key: 'puzzle2',\n  type: 'audio',\n  urls: ['music/Puzzle-Game-2_Looping.mp3']\n}, {\n  key: 'lostjungle',\n  type: 'audio',\n  urls: ['music/Lost-Jungle_Looping.mp3']\n}, {\n  key: 'cold-moon',\n  type: 'audio',\n  urls: ['music/Cold-Moon.mp3']\n}, {\n  key: 'correct-card',\n  type: 'audio',\n  urls: ['soundfx/positive/glow_med_L_to_R_002.wav']\n}, {\n  key: 'wrong-card',\n  type: 'audio',\n  urls: ['soundfx/negative/SW011_Alarms_construction-kit-element_081.wav']\n}, {\n  key: 'save-notification',\n  type: 'audio',\n  urls: ['soundfx/SFX-ARCADIA_Notification01.wav']\n}, {\n  key: 'swish-close',\n  type: 'audio',\n  urls: ['soundfx/13th-whoosh-swing-sound.mp3']\n}, {\n  key: 'swish-open',\n  type: 'audio',\n  urls: ['soundfx/swoosh-metal-rod-swing-sound-made-with-bamboo-stick.mp3']\n}, {\n  key: 'inventory-add',\n  type: 'audio',\n  urls: ['soundfx/SFX-ARCADIA_Error03.wav']\n}];\n\n// --logic battle placeholder images\n\nexports.logic_battle = [{\n  key: 'alien-stare',\n  type: 'image',\n  url: 'battle/alien-stare.png'\n}, {\n  key: 'greek-sphinx',\n  type: 'image',\n  url: 'battle/greek-sphinx.png'\n}, {\n  key: 'cyborg-face',\n  type: 'image',\n  url: 'battle/cyborg-face.png'\n}, {\n  key: 'curly-mask',\n  type: 'image',\n  url: 'battle/curly-mask.png'\n}, {\n  key: 'lunar-module',\n  type: 'image',\n  url: 'battle/lunar-module.png'\n}, {\n  key: 'fencer',\n  type: 'image',\n  url: 'battle/fencer.png'\n}, {\n  key: 'new-born',\n  type: 'image',\n  url: 'battle/new-born.png'\n}, {\n  key: 'saint-basil-cathedral',\n  type: 'image',\n  url: 'battle/saint-basil-cathedral.png'\n}, {\n  key: 'goblin-head',\n  type: 'image',\n  url: 'battle/goblin-head.png'\n}, {\n  key: 'xenobio',\n  type: 'image',\n  url: 'battle/xenobio.png'\n}, {\n  key: 'xenopsych',\n  type: 'image',\n  url: 'battle/xenopsych.png'\n}, {\n  key: 'quasaria-logo-fill',\n  type: 'image'\n}, {\n  key: 'battle01',\n  type: 'json',\n  url: 'battle/battle01.json'\n}, {\n  key: 'question-mark',\n  type: 'image',\n  url: 'ui/question-mark-button.png'\n}, {\n  key: 'sponsor',\n  type: 'image',\n  url: 'battle/sponsor.png'\n}, {\n  key: 'currency',\n  type: 'image',\n  url: 'battle/currency.png'\n}, {\n  key: 'emp',\n  type: 'image',\n  url: 'battle/emp.png'\n}, {\n  key: 'call-bluff',\n  type: 'image',\n  url: 'battle/call-bluff.png'\n}];\n","/*\n * AreaTransition\n * ===============\n *\n * UI window for area transition\n */\n\n'use strict';\n\nvar areas = require('../../static/assets/areas.json');\n\nmodule.exports = AreaTransitionWindow;\n\nfunction areaTransitionButtonToggle() {\n  // unresponsive while animating\n  if (this._isTweening)\n    return;\n\n  this._isTweening = true;\n  var timeToTween = 500;  // milliseconds\n\n  // hide panel\n  if (this.panel.visible) {\n    this._game.sound.play('swish-close');\n    this._game.add.tween(this.panel).to(\n        {x: 0 - this.panelWidth - this._memoryPadding}, timeToTween, Phaser.Easing.Exponential.Out, true\n      ).onComplete.add(\n        function () {\n          this.panel.visible = false;\n          this._isTweening = false;\n        }, this\n      );\n    return;\n  }\n\n  // show panel\n\n  // if memory bank window is open, close it\n  if (this._game.memoryBankWindow.panel.visible) {\n    this._game.memoryBankWindow.panel.visible = false;\n  }\n\n  this.panel.visible = true;\n  this.display();\n  //each time you press the button it should refresh the areas that it displays\n\n  this.panel.x = 0 - this.panelWidth - this._memoryPadding;\n  this._game.sound.play('swish-open');\n  this._game.add.tween(this.panel).to(\n      {x: this._baseX}, timeToTween, Phaser.Easing.Exponential.Out, true\n    ).onComplete.add(function () { this._isTweening = false; }, this);\n}\n\nfunction AreaTransitionWindow(game/*, ...args*/) {\n  Phaser.Group.call(this, game/*, ...args*/);\n\n  this._game = game;\n\n  // private members specifying margin and padding\n  this._memoryTextOriginX = 100;\n  this._memoryTextOriginY = 155;\n  this._memoryPadding = 32;\n  this._itemOriginX = 80;\n  this._itemOriginY = 25;\n  this._baseX = this._memoryPadding / 2;\n  this._baseY = this._memoryPadding * 2;\n\n  // memory bank window dimensions\n  this.panelHeight = game.height * 1/2 - this._memoryPadding / 2;\n  this.panelWidth = game.width - this._memoryPadding;\n  this._rowCapacity = 5;  // items per row\n  this._itemStart = 0;  // determines which row to show\n\n  // window-dependent private member dimensions\n  this._memoryTextWidth = this.panelWidth - 185;\n  this._itemPadding = this.panelWidth / 50;\n  this._nextOriginX = this.panelWidth - 55;\n  this._nextOriginY = 0;\n  this._prevOriginX = -18;\n  this._prevOriginY = 0;\n\n  /**\n   * Panel\n   */\n\n  game.slickUI.add(\n    this.panel = new SlickUI.Element.DisplayObject(\n      this._baseX, this._baseY, game.make.sprite(0,0, 'memory-bank'),\n      this.panelWidth, this.panelHeight));\n  this.panel.displayObject.width = this.panelWidth;\n  this.panel.displayObject.height = this.panelHeight;\n\n  // by default, not displayed\n  this.panel.visible = false;\n  this.panel.alpha = 0.8;\n\n  /**\n   * Toggle button\n   */\n  // until you click on the toggle button\n  game.slickUI.add(\n    this.toggleButton = new SlickUI.Element.DisplayObject(\n      this._memoryPadding,this._memoryPadding, game.make.button(0,0, 'button')));\n  // set scale such that width = 1/8 panel width\n  this.toggleButton.displayObject.scale.setTo(\n    (this.panelWidth / 8) / this.toggleButton.displayObject.width);\n  //this.toggleButton.x = game.width - this._memoryPadding - this.toggleButton.displayObject.width;\n  // show panel callback\n  this.toggleButton.events.onInputDown.add(areaTransitionButtonToggle, this);\n  this.toggleButton.alpha = 0.9;\n\n  var toggleStyle = { font: '14px Goudy Bookletter 1911', fill: '#48f2ff', boundsAlignH: 'center', boundsAlignV: 'middle'};\n  this.toggleButton.add(\n    this.toggleText = new SlickUI.Element.DisplayObject(0, 0, game.make.text(0, 0, 'AREAS', toggleStyle)));\n  this.toggleText.displayObject.setTextBounds(0, this.toastTextY, this.toggleButton.displayObject.width, this.toggleButton.displayObject.height);\n\n  /**\n   * Text - name and description\n   */\n  var nameTextStyle = { font: '14px Goudy Bookletter 1911', fill: '#48f2ff', wordWrap: true, wordWrapWidth: this._memoryTextWidth, fontWeight: 'bold', boundsAlignH: 'center' };\n  this.panel.add(\n    this.nameText = new SlickUI.Element.DisplayObject(\n      this._memoryTextOriginX,\n      this._memoryTextOriginY,\n      game.make.text(0,0, '', nameTextStyle), this._memoryTextWidth));\n  // for alignment purposes\n  var nameTextHeight = this.nameText.displayObject.getBounds().height;\n  this.nameText.displayObject.setTextBounds(0,0, this._memoryTextWidth, nameTextHeight);\n\n  var descTextStyle = { font: '14px Open Sans', fill: '#48f2ff', wordWrap: true, wordWrapWidth: this._memoryTextWidth, align: 'left' };\n  this.panel.add(\n    this.descText = new SlickUI.Element.DisplayObject(\n      this._memoryTextOriginX,\n      this._memoryTextOriginY + nameTextHeight,\n      game.make.text(0,0, '', descTextStyle), this._memoryTextWidth));\n\n  /**\n   * Bookkeeping\n   */\n  // are we currently animating?\n  this._isTweening = false;\n  this._itemDisplayObjects = []; // for deletion purposes\n  this._navButtons = [];\n  this.areasToShow = Object.keys(areas).filter(function(area) {\n    return areas[area]['navigable'] == true;\n  });\n}\n\nAreaTransitionWindow.prototype = Object.create(Phaser.Group.prototype);\nAreaTransitionWindow.prototype.constructor = AreaTransitionWindow;\n\n// Utility functions: instantly hide or show panel/UI\nAreaTransitionWindow.prototype.hidePanel = function () {\n  this.panel.visible = false;\n  this.panel.x = 0 - this.panelWidth - this._memoryPadding;\n};\n\nAreaTransitionWindow.prototype.disable = function () {\n  this.hidePanel();\n  this.toggleButton.visible = false;\n  this.toggleButton.inputEnabled = false;\n};\n\nAreaTransitionWindow.prototype.enable = function () {\n  this.hidePanel();\n  this.toggleButton.visible = true;\n  this.toggleButton.inputEnabled = true;\n  //not sure that this will re-add listeners\n};\n\nAreaTransitionWindow.prototype.display = function () {\n  this.cleanWindow();\n  this.displayAreas();\n  this.showNavButtons();\n};\n\nAreaTransitionWindow.prototype.cleanWindow = function () {\n  for (var i = 0; i < this._itemDisplayObjects.length; i++) {\n    var item = this._itemDisplayObjects[i];\n    item.container.displayGroup.removeAll(true);\n    item.container.displayGroup.destroy();\n  }\n  for (i = 0; i < this._navButtons.length; i++) {\n    var navButton = this._navButtons[i];\n    navButton.container.displayGroup.removeAll(true);\n    navButton.container.displayGroup.destroy();\n  }\n  this._itemDisplayObjects = [];\n  this._navButtons = [];\n};\n\nAreaTransitionWindow.prototype.displayAreas = function () {\n  this.areasToShow = Object.keys(areas).filter(function(area) {\n    let seen = this._game.player.seenAreas.includes(area);\n    //this filter will add rooms seen in the past that should be avaliable in the window\n    return areas[area]['navigable'] == true && this._game.room.name != area && seen;\n  }, this);\n  //this is going to leave things out, or have cycles\n  // we will have to think carefully when adding this information to the json\n  // do we want a given room to only appear if seen or do we want to have a group of\n  // rooms all navigable from one another?\n  // ie hanger must be reached first, but once there you have immediate access to talvine\n  for (let area of this._game.room.area.areaAccess){\n    if (!this.areasToShow.includes(area)){\n      this.areasToShow.push(area);\n    }\n  }\n\n  var itemEnd = this._itemStart + this._rowCapacity < this.areasToShow.length\n    ? this._itemStart + this._rowCapacity\n    : this.areasToShow.length;\n\n  for (var i = this._itemStart; i < itemEnd; i++) {\n    var itemId = this.areasToShow[i];\n\n    // scaled width = 1/7 panel width;\n    var desiredWidth = (this.panelWidth / 7);\n    var assetSprite = this._game.make.sprite(0,0, itemId);\n    assetSprite.scale.setTo(desiredWidth / assetSprite.width);\n\n    var maskSprite = this._game.make.sprite(0,0, 'memory-bank-icon-mask');\n    maskSprite.scale.setTo(desiredWidth / maskSprite.width);\n\n    var maskedBmd = this._game.make.bitmapData(maskSprite.width, maskSprite.height);\n    maskedBmd.alphaMask(assetSprite, maskSprite);\n\n    var itemSprite = this._game.make.sprite(0,0, maskedBmd);\n    var slickItem;\n    this.panel.add(slickItem = new SlickUI.Element.DisplayObject(\n      this._itemOriginX + (i - this._itemStart)*(this._itemPadding + itemSprite.width), this._itemOriginY,\n      itemSprite));\n\n    var borderSprite = this._game.make.sprite(0,0, 'memory-bank-icon');\n    borderSprite.scale.setTo(desiredWidth / borderSprite.width);\n    var slickBorder;\n    this.panel.add(slickBorder = new SlickUI.Element.DisplayObject(\n      this._itemOriginX + (i - this._itemStart)*(this._itemPadding + itemSprite.width), this._itemOriginY,\n      borderSprite));\n\n    itemSprite.inputEnabled = true;\n    itemSprite.input.useHandCursor = true;\n    itemSprite.events.onInputOver.add(function () {\n      this.nameText.displayObject.text = areas[this.itemId]['name'].toUpperCase();\n    }, {nameText: this.nameText, itemId: itemId});\n    itemSprite.events.onInputUp.add(function() {\n      this.game.room.loadArea(this.itemId);\n    }, {game: this._game, itemId: itemId});\n    itemSprite.events.onInputUp.add(areaTransitionButtonToggle, this);\n\n    this._itemDisplayObjects.push(slickItem);\n    this._itemDisplayObjects.push(slickBorder);\n  }\n};\n\nAreaTransitionWindow.prototype.showNavButtons = function () {\n\n  // next buttons\n  if (this._itemStart + this._rowCapacity < this.areasToShow.length) {\n    var nextButton = this._game.make.button(0,0,'memory-bank-next');\n    var slickNext;\n    this.panel.add(slickNext = new SlickUI.Element.DisplayObject(\n      this._nextOriginX, this._nextOriginY, nextButton));\n    // scaled by height, equal to panel height\n    nextButton.scale.setTo(this.panelHeight / nextButton.height);\n    this._navButtons.push(slickNext);\n\n    nextButton.events.onInputUp.add(function () {\n      this.switchRow(true);\n      this.display();\n    }, this);\n\n  }\n\n  // prev buttons\n  if (this._itemStart > 0) {\n    var prevButton = this._game.make.button(0,0,'memory-bank-next');\n    // rotate sprite\n    prevButton.anchor.setTo(0.5, 0.5);\n    prevButton.scale.y *= -1;\n    prevButton.anchor.setTo(1,1);\n\n    var slickPrev;\n    this.panel.add(slickPrev = new SlickUI.Element.DisplayObject(\n      this._prevOriginX, this._prevOriginY,\n      prevButton));\n    this._navButtons.push(slickPrev);\n\n    prevButton.scale.setTo(this.panelHeight / prevButton.height);\n\n    prevButton.events.onInputUp.add(function () {\n      this.switchRow(false);\n      this.display();\n    }, this);\n\n  }\n};\n\nAreaTransitionWindow.prototype.switchRow = function (wantsNextRow) {\n  if (wantsNextRow && this._itemStart + this._rowCapacity < this.areasToShow.length) {\n    this._itemStart += this._rowCapacity;\n    return;\n  }\n  if (!wantsNextRow && this._itemStart - this._rowCapacity >= 0) {\n    this._itemStart -= this._rowCapacity;\n    return;\n  }\n};\n\nAreaTransitionWindow.prototype.update = function () {\n  // TODO: Stub.\n};\n","'use strict';\n\n\nfunction Argument(game, x, y, assetName, match, jsonIdx) {\n  Phaser.Sprite.call(this, game, x, y, assetName);\n  this.assetName = assetName;\n  this.inputEnabled = true;\n  this.input.useHandCursor = true;\n  this.key = match;\n  this.jsonIdx = jsonIdx;\n  this.shown = false;\n}\n\nArgument.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Argument.prototype.constructor = Argument;\n","/*\n * ArgumentManager\n * ===============\n *\n * Extension of ConversationManager for Logic Battles\n */\n\n'use strict';\n\nvar ConversationManager = require('./ConversationManager');\n\nmodule.exports = ArgumentManager;\n\nfunction ArgumentManager(game, customActions/*, ...args*/) {\n  // TODO:\n  //   1. Edit constructor parameters accordingly.\n  //   2. Adjust object properties.\n\n  ConversationManager.call(this, game, customActions);\n  this.nestedIdx = 0;\n  this.currentParams = [];\n\n  /* Signals */\n  this.specialCompleteSignal = new Phaser.Signal();\n  this.interludeCompleteSignal = new Phaser.Signal();\n\n  /* PRIVATE */\n  // TODO: remove companions from here!\n  this.specialArgumentTypes = ['ability', 'intro', 'custom', \n    'lose', 'win', 'gameover', 'credits'];\n\n}\nArgumentManager.prototype = Object.create(ConversationManager.prototype);\nArgumentManager.prototype.constructor = ArgumentManager;\n\nArgumentManager.prototype.update = function () {\n  // TODO: Stub.\n};\n\n/** BEGIN OVERRIDE FUNCTIONS */\nArgumentManager.prototype.getResponses = function () {\n  if (this.currentParams.length > 0) {\n    return [{ 'target': this.nestedIdx+1, 'text': '[Next]', 'params': this.currentParams }];\n  }\n\n  return [];\n};\n\nArgumentManager.prototype.advanceToTarget = function (targetIdx, params = []) {\n  // pass along current parameters\n  this.currentParams = params;\n  if (params.length > 0) {\n    if (this.specialArgumentTypes.includes(params[0])) {\n      var customType = params[0];\n      var custom = this.conversation[customType];\n\n      if (params.length >= 2) {\n        // Traverse through parameters\n        for (var i = 1; i < params.length; i++) {\n          if (params[i] in custom)\n            custom = custom[params[i]];\n        }\n      }\n\n      if (targetIdx in custom) {\n        this.nestedIdx = targetIdx;\n        return true;\n      }\n\n      // end of this conversation, go back to whatever we were doing\n      this.currentParams = [];\n      this.specialCompleteSignal.dispatch();\n      return false; // do NOT refresh display on end of special argument; DialogueWindow waits for a display call\n\n    } else if (params.length >= 2 && params[0] === 'interlude') {\n      var interludeType = params[1];\n      var argument = this.conversation[this.idx];\n\n      if (interludeType in argument && targetIdx in argument[interludeType]) {\n        this.nestedIdx = targetIdx;\n        return true;\n      }\n\n      this.endArgInterlude();\n      return false; // do NOT refresh display on end of argument interlude\n    }\n  }\n\n  this.idx = targetIdx;\n  return true;\n};\n\nArgumentManager.prototype.endConversation = function() {\n  this.customActions.customAction(this.conversation['onEnd']);  \n};\n\nArgumentManager.prototype.getAvatar = function () {\n  return 'invisible';\n};\n\nArgumentManager.prototype.getCurrentText = function () {\n  if (this.conversation === null)\n    return '';\n\n  var arg = this.getArgument();\n  if (arg === null)\n    return '';\n\n  return arg['text'];\n};\n\nArgumentManager.prototype.getSpeaker = function () {\n  if (this.conversation === null) {\n    return '';\n  }\n\n  var arg = this.getArgument();\n  if (arg === null)\n    return '';\n\n  return arg['speaker']; \n};\n/** END OVERRIDE FUNCTIONS */\n\nArgumentManager.prototype.getArgument = function () {\n  if (this.currentParams.length > 0) {\n    var params = this.currentParams;\n    if (this.specialArgumentTypes.includes(params[0])) {\n      // special argument\n      // support for multiple params\n      var customType = params[0];\n      var custom = this.conversation[customType];\n\n      if (params.length >= 2) {\n        // Traverse through parameters\n        for (var i = 1; i < params.length; i++) {\n          var param = params[i];\n          if (param in custom) {\n            custom = custom[param];\n          }\n        }\n      }\n\n      return custom[this.nestedIdx];\n\n    } else if (params.length >= 2 && params[0] === 'interlude') {\n      // interlude\n      return this.conversation[this.idx][params[1]][this.nestedIdx];\n    }\n  }\n\n  return this.conversation[this.idx];\n};\n\nArgumentManager.prototype.startInterlude = function (type) {\n  this.nestedIdx = 0;\n  this.currentParams = ['interlude', type];\n};\n\nArgumentManager.prototype.endArgInterlude = function () {\n  this.nestedIdx = 0;\n  this.currentParams = [];\n  this.interludeCompleteSignal.dispatch();\n};\n\nArgumentManager.prototype.startSpecialArgument = function (/*... arguments*/) {\n  this.nestedIdx = 0;\n  for (var i = 0; i < arguments.length; i++)\n    this.currentParams.push(arguments[i]);\n};\n\nArgumentManager.prototype.getCurrentCounters = function () {\n  return this.conversation[this.idx]['counters'];\n};\n\nArgumentManager.prototype.isNumberProperty = function (property) {\n  var n = Math.floor(Number(property));\n  return String(n) == property;\n};\n\nArgumentManager.prototype.getAllArguments = function () {\n  // returns as an array\n  var args = [];\n  var keys = Object.keys(this.conversation);\n  var prop;\n  for (prop in keys) {\n    if (this.isNumberProperty(prop) && prop in this.conversation) {\n      args.push(this.conversation[prop]);\n    }\n  }\n  return args;\n};\n\nArgumentManager.prototype.getAllAbilities = function () {\n  var abilities = [];\n  if ('abilities' in this.conversation) {\n    var i;\n    for (i in this.conversation['abilities']) {\n      abilities.push(this.conversation['abilities'][i]);\n    }\n  }\n  return abilities;\n};\n\nArgumentManager.prototype.setArgumentById = function (id) {\n  for (var i = 0; i < this.conversation.length; i++) {\n    if (this.conversation[i]['id'] === id) {\n      this.idx = i;\n      return;\n    }\n  }\n};\n\nArgumentManager.prototype.takeActions = function() {\n  var argument = this.getArgument();\n  if (argument === null)\n    return '';\n\n  if ('actions' in argument) {\n    for (var action in argument['actions']) {\n      ConversationManager.prototype.takeAction.call(this, this._game, action, argument['actions'][action]);\n    }\n  }\n};","/*\n * BattleUi\n * ========\n *\n * User interface for Logic Battle mechanic\n */\n\n'use strict';\n\nmodule.exports = BattleUi;\n\nvar HealthBar = require('./HealthBar.js');\nvar Icon = require('./Icon');\nvar textstyles = require('../../static/assets/textstyles.json');\nvar npcs = require('../../static/assets/npcs.json');\n\nfunction BattleUi(game, playerDeck, enemyDeck/*, ...args*/) {\n  Phaser.Group.call(this, game/*, ...args*/);\n\n  // - this.cardSignal\n  // - this.cardAnimCompleteSignal\n  // - this.argAnimCompleteSignal\n  // - this.playerDeckIcons\n  // - this.enemyDeckIcons\n  // - this.credBar\n\n  /** Signals */\n  this.cardSignal = new Phaser.Signal();\n  this.companionSignal = new Phaser.Signal();\n  this.cardAnimCompleteSignal = new Phaser.Signal();\n  this.argAnimCompleteSignal = new Phaser.Signal();\n\n  this.playerDeckIcons = [];\n  this.enemyDeckIcons = [];\n  this.companionIcons = [];\n\n  /** Private properties */\n  this._game = game;\n  this._portraitSize = 100;\n  this._cardWidth = 70;\n  this._cardHeight; // unspecified\n  this._credSize = 85;\n  this._enemyOriginY = game.height * 0.3;\n  this._centerX = game.width / 2;\n  this._argumentRadius = this._portraitSize;\n  this._playerIconsPerRow = 4;\n\n  /** Background + overlay (this._background, this._overlay) */\n  var roomBg = game.make.sprite(0,0, game.room.area.id);\n  game.add.existing(roomBg);\n\n  this._background = game.add.sprite(0,0,'battle-background');\n  this._background.width = game.width;\n  this._background.height = game.height;\n  this._background.alpha = 0.85;\n\n  this._overlay = game.add.sprite(0,0,'battle-overlay');\n  this._overlay.width = game.width;\n  this._overlay.height = game.height;\n  // hide overlay initially\n  this._overlay.alpha = 0;\n\n  /** Enemy display */\n  var enemyBarConfig = {x: this._centerX, y: 50, height:20, width:150, flipped:true};\n  this.persuadeBar = new HealthBar(game, enemyBarConfig);\n  var enemyIcon = game.add.existing(new Icon(game,\n    this._centerX - this._portraitSize/2, this._enemyOriginY - this._portraitSize/2,\n    'gleaming-shoal-portrait', null, null, this._portraitSize));\n  enemyIcon.alpha = 1;\n\n  /** Enemy deck display */\n  for (var i = 0; i < enemyDeck.length; i++) {\n\n    var argIcon = game.add.existing(new Icon(game, 0,0,\n      'question-mark', 'memory-bank-icon-mask', 'enemy-arg-icon', this._cardWidth));\n\n    this.enemyDeckIcons.push({'id': enemyDeck[i].assetName, 'icon': argIcon});\n\n  }\n  this.positionArguments(game, false);\n\n  /* Current argument position marker */\n  var currentArgMarker = game.add.sprite(0, 0, 'enemy-arg-icon');\n  currentArgMarker.scale.setTo(this._cardWidth * 1.2 / currentArgMarker.width);\n  currentArgMarker.anchor.setTo(0.5, 0.5);\n\n  currentArgMarker.x = this._centerX;\n  currentArgMarker.y = this._enemyOriginY + this._argumentRadius;\n\n  /** Player display */\n  this.credIcon = new SlickUI.Element.DisplayObject(\n    this._centerX - this._credSize/2, game.height * 5 / 8 - this._credSize / 2,\n    new Icon(game, 0,0,\n    'memory-bank-icon-mask', null, 'memory-bank-icon', this._credSize));\n  game.slickUI.add(this.credIcon);\n  this._cardHeight = this.credIcon.displayObject.height;\n\n  this.credIcon.add(\n    this.credText = new SlickUI.Element.DisplayObject(0, 0,\n      game.make.text(0, 0, ''+this._game.cred, textstyles['credibility']))\n  );\n  this.credText.displayObject.setTextBounds(0, 0, this._credSize, this.credIcon.displayObject.height);\n\n  /** Player deck display */\n  for (i = 0; i < playerDeck.length; i++) {\n    this.makeCardIcon(playerDeck[i]);\n  }\n\n  /** Companion display */\n  for (i = 0; i < game.companions.length; i++) {\n    var companionName = npcs[game.companions[i]]['name'];\n    var companionAvatar = npcs[game.companions[i]]['avatar'];\n    var companionIcon = game.add.existing(new Icon(game, 0,0,\n      companionAvatar, 'memory-bank-icon-mask', 'companion-icon', this._cardWidth));\n    companionIcon.borderSprite.tint = 0x00ffff;\n    companionIcon.x = game.width * 1/5 + i*(this._cardWidth);\n    companionIcon.y = this.credIcon.y - this._cardWidth / 2;\n\n    var companionSignal = this.companionSignal;\n    companionIcon.events.onInputDown.add(function () {\n      companionSignal.dispatch(this.game, this.companionName);\n    }, {game: game, companionName: companionName});\n\n    companionIcon.inputEnabled = true;\n    companionIcon.input.useHandCursor = true;\n\n    this.companionIcons.push(companionIcon);\n  }\n\n}\n\nBattleUi.prototype = Object.create(Phaser.Group.prototype);\nBattleUi.prototype.constructor = BattleUi;\n\nBattleUi.prototype.update = function () {\n  // TODO: Stub.\n};\n\nBattleUi.prototype.makeCardIcon = function (card) {\n  var deckOriginX = this._game.width * 3 / 5;\n  var deckOriginY = this.credIcon.y + (this._credSize - this._cardWidth) / 2;\n\n  var iconIdx = this.playerDeckIcons.length;\n\n  // otherwise, make a new card icon\n  var playerCardIcon = this._game.add.existing(new Icon(this._game, 0,0,\n    card.assetName, 'memory-bank-icon-mask', 'memory-bank-icon', this._cardWidth));\n  playerCardIcon.x = deckOriginX + iconIdx%this._playerIconsPerRow * this._cardWidth;\n  playerCardIcon.y = deckOriginY - Math.floor(iconIdx/this._playerIconsPerRow) * this._cardHeight;\n\n  var cardSignal = this.cardSignal;\n  // send signal upon click and delete tooltip\n  playerCardIcon.events.onInputDown.add(function () {\n    cardSignal.dispatch(this.game, this.currentCard);\n  }, {game: this._game, currentCard: card});\n\n  playerCardIcon.inputEnabled = true;\n  playerCardIcon.input.useHandCursor = true;\n\n  this.playerDeckIcons.push(playerCardIcon);\n  this.addTooltip(card, iconIdx,\n    this._centerX + this._argumentRadius, this._enemyOriginY - this._argumentRadius);\n  return playerCardIcon;\n};\n\nBattleUi.prototype.getArgIcon = function (argument) {\n  for (var i = 0; i < this.enemyDeckIcons.length; i++) {\n    var argIconWithIdx = this.enemyDeckIcons[i];\n    if (argument.assetName === argIconWithIdx['id']) {\n      return {'index': i, 'id': argIconWithIdx['id'], 'icon': argIconWithIdx['icon']};\n    }\n  }\n  return {'index': -1, 'icon': null};\n};\n\nBattleUi.prototype.revealCurrent = function () {\n  var currentIconWithId = this.enemyDeckIcons[0];\n  currentIconWithId['icon'] = this.revealArgIcon(\n    currentIconWithId['id'], currentIconWithId['icon']);\n};\n\nBattleUi.prototype.revealArgIcon = function (id, argIcon) {\n  var trash = argIcon;\n  var newIcon = this._game.add.existing(new Icon(this._game, 0,0,\n    id, 'memory-bank-icon-mask', 'enemy-arg-icon', this._cardWidth));\n  newIcon.x = argIcon.x;\n  newIcon.y = argIcon.y;\n  this._game.world.swap(argIcon, newIcon);  // swap display ordering\n  trash.destroy();\n  return newIcon;\n};\n\nBattleUi.prototype.getCardIcon = function (card) {\n  for (var i = 0; i < this.playerDeckIcons.length; i++) {\n    var cardIcon = this.playerDeckIcons[i];\n    if (card.key === cardIcon.id) {\n      return {'index': i, 'icon': cardIcon};\n    }\n  }\n  return {'index': -1, 'icon': null};\n};\n\nBattleUi.prototype.startCorrectCardTween = function (cardIcon, cardIdx, targetedArg) {\n  //this sounds best when it starts at click\n  this._game.sound.play('correct-card');\n  var tween = this._game.add.tween(cardIcon);\n  tween.to(\n    { x: targetedArg.x, y: targetedArg.y }, 1000,\n    Phaser.Easing.Exponential.In, true, 0);\n\n  // create fill sprite\n\n  var shatterSprite = this._game.make.sprite(\n    targetedArg.x + targetedArg.width/2,\n    targetedArg.y + targetedArg.height/2, 'memory-bank-icon-fill');\n  shatterSprite.alpha = 0;\n  // add slight fudge factor\n  shatterSprite.scale.setTo(this._cardWidth*1.05 / shatterSprite.width);\n  shatterSprite.anchor.setTo(0.5, 0.5);\n  this._game.add.existing(shatterSprite);\n  var alphaTween = this._game.add.tween(shatterSprite);\n\n  // start alpha tween after\n  tween.onComplete.add(function () {\n    alphaTween.to({ alpha: 1 }, 1000, Phaser.Easing.Exponential.In, true, 0);\n    alphaTween.onComplete.add(function () {\n      cardIcon.destroy();\n      targetedArg.destroy();\n      shatterSprite.destroy();\n      // arguments update by themselves, player cards do not\n      this.playerDeckIcons.splice(cardIdx, 1);\n    }, this);\n  }, this);\n\n  // return the last tween in the chain\n  return alphaTween;\n};\n\nBattleUi.prototype.startIncorrectCardTween = function (cardIcon, targetedArg) {\n  var tween = this._game.add.tween(cardIcon);\n  var originX = cardIcon.x;\n  var originY = cardIcon.y;\n\n  tween.to({ x: targetedArg.x, y: targetedArg.y }, 1000,\n    Phaser.Easing.Exponential.InOut, false, 0);\n  // add an additional tween to return to original position\n  tween.onComplete.add(function () {\n    this._game.sound.play('wrong-card');\n\n  }, this);\n\n  var lastTween = this._game.add.tween(cardIcon);\n  lastTween.to({ x: originX, y: originY }, 1000,\n    Phaser.Easing.Exponential.In, false, 0);\n\n  tween.chain(lastTween).start();\n\n  // return last tween in the chain\n  return lastTween;\n};\n\nBattleUi.prototype.playCardAnimation = function (card, argument, isCorrect) {\n  // find matching argument icon\n  var targetedArg = undefined;\n  for (var i = 0; i < this.enemyDeckIcons.length; i++) {\n    var argIconId = this.enemyDeckIcons[i]['id'];\n    if (argument.assetName === argIconId) {\n      targetedArg = this.enemyDeckIcons[i]['icon'];\n      break;\n    }\n  }\n  if (typeof targetedArg === 'undefined')\n    return;\n\n  // find matching card icon\n  for (i = 0; i < this.playerDeckIcons.length; i++) {\n    var cardIcon = this.playerDeckIcons[i];\n    if (card.key === cardIcon.id) {\n      var lastTween;\n      // play different animations on correct vs. incorrect card\n      if (isCorrect) {\n        lastTween = this.startCorrectCardTween(cardIcon, i, targetedArg);\n      } else {\n        lastTween = this.startIncorrectCardTween(cardIcon, targetedArg);\n      }\n      lastTween.onComplete.add(function () {\n        if (card.multiUse && isCorrect)\n          this.makeCardIcon(card);\n        this.cardAnimCompleteSignal.dispatch(this._game);\n\n      }, this);\n      return;\n    }\n  }\n};\n\nBattleUi.prototype.updateArguments = function (args, currentArgIdx) {\n  var newEnemyDeckIcons = [];\n\n  for (var i = 0; i < args.length; i++) {\n    var idx = currentArgIdx + i;\n    if (idx >= args.length)\n      idx -= args.length;\n\n    // null argument\n    if (typeof args[idx] === 'undefined' || args[idx] === null)\n      continue;\n\n    var argIconWithId = this.getArgIcon(args[idx]);\n    // not found\n    if (argIconWithId['index'] === -1) {\n      // add a new argument icon\n      argIconWithId['id'] = args[idx]['assetName'];\n      argIconWithId['icon'] = this._game.add.existing(new Icon(this._game, 0,0,\n        'question-mark', 'memory-bank-icon-mask', 'enemy-arg-icon', this._cardWidth));\n      // TODO: hardcoded as center right now.\n      argIconWithId['icon'].x = this._centerX - this._cardWidth/2;\n      argIconWithId['icon'].y = this._enemyOriginY - this._cardWidth/2;\n    }\n    newEnemyDeckIcons.push({\n      'id': argIconWithId['id'], \n      'icon': argIconWithId['icon']\n    });\n  }\n\n  this.enemyDeckIcons = newEnemyDeckIcons;\n};\n\nBattleUi.prototype.positionArguments = function (game, isTweening = true) {\n  var nArgs = this.enemyDeckIcons.length;\n  var argIcon;\n\n  if (!isTweening) {\n    for (var i = 0; i < nArgs; i++) {\n      argIcon = this.enemyDeckIcons[i]['icon'];\n      argIcon.x = this._centerX + Math.sin(i / nArgs * 2*Math.PI) * this._argumentRadius - this._cardWidth / 2;\n      argIcon.y = this._enemyOriginY + Math.cos(i / nArgs * 2*Math.PI) * this._argumentRadius - this._cardWidth / 2;\n    }\n    return;\n  }\n\n  var tweeningPositions = [];\n  var tweens = [];\n  for (var j = 0; j < nArgs; j++) {\n    tweeningPositions.push(\n      new Phaser.Point(\n        this._centerX + Math.sin(j / nArgs * 2*Math.PI) * this._argumentRadius - this._cardWidth / 2,\n        this._enemyOriginY + Math.cos(j / nArgs * 2*Math.PI) * this._argumentRadius - this._cardWidth / 2));\n  }\n  for (j = 0; j < nArgs; j++) {\n    argIcon = this.enemyDeckIcons[j]['icon'];\n    if (typeof argIcon === 'undefined' || argIcon === null)\n      continue;\n    tweens.push(game.add.tween(argIcon).to(\n      { x: tweeningPositions[j].x, y: tweeningPositions[j].y},\n      1000, Phaser.Easing.Quadratic.InOut, false, 0));\n  }\n  for (j = 0; j < tweens.length; j++) {\n    // Notify completion of argument rotation\n    if (j === 0) {\n      tweens[j].onComplete.add(function () {\n        this.argAnimCompleteSignal.dispatch(this._game);\n      }, this);\n    }\n    tweens[j].start();\n  }\n};\n\n/* Gives the impression of arguments randomizing. */\nBattleUi.prototype.rouletteArguments = function () {\n  var lastTween = null;\n  for (var i = 0; i < this.enemyDeckIcons.length; i++) {\n    lastTween = this._game.add.tween(this.enemyDeckIcons[i]['icon']).to(\n      { x: this._centerX - this._cardWidth/2, y: this._enemyOriginY - this._cardWidth/2}, \n      1000, Phaser.Easing.Quadratic.InOut, true, 0);\n  }\n  return lastTween;\n};\n\nBattleUi.prototype.positionCards = function () {\n  var deckOriginX = this._game.width * 3 / 5;\n  var deckOriginY = this.credIcon.y + (this._credSize - this._cardWidth) / 2;\n\n  for (var i = 0; i < this.playerDeckIcons.length; i++) {\n    var tween = this._game.add.tween(this.playerDeckIcons[i]);\n    tween.to({x: deckOriginX + i%this._playerIconsPerRow * this._cardWidth,\n      y: deckOriginY - Math.floor(i/this._playerIconsPerRow) * this._cardHeight},\n      300, Phaser.Easing.Quadratic.InOut, true, 0);\n  }\n};\n\nBattleUi.prototype.battleStart = function () {\n  this.cardsInputEnabled(true);\n  this.revealCurrent();\n};\n\nBattleUi.prototype.introTweens = function () {\n  var tweenTime = 500;\n  this.tweenInOverlay(tweenTime);\n  return this.tweenInBackgroundTint(tweenTime);\n};\n\nBattleUi.prototype.tweenInOverlay = function (tweenTime) {\n  var tween = this._game.add.tween(this._overlay);\n  tween.to( {alpha: 1}, tweenTime, Phaser.Easing.Exponential.In, true, 0);\n  return tween;\n};\n\nBattleUi.prototype.tweenInBackgroundTint = function (tweenTime) {\n  var tween = this._game.add.tween(this._background);\n  tween.to( {tint: 0x33343a}, tweenTime, Phaser.Easing.Exponential.In, true, 0);\n  return tween;\n};\n\nBattleUi.prototype.flickerOverlay = function () {\n  var tween = this._game.add.tween(this._overlay);\n  var timeLeft = 500; // half a second total\n  var flickerTime = 10;\n  var nFlickers = this._game.rnd.integerInRange(2,4);\n  var defaultTint = this._overlay.tint;\n  var tintColor = 0x333535;\n  var firstTween = tween;\n\n  for (var i = 0; i < nFlickers; i++) {\n    // use up all remaining time if it is the last flicker\n    var randTime = i == nFlickers - 1\n      ? timeLeft\n      : this._game.rnd.frac() * timeLeft;\n\n    // flicker instantly if it's the first flicker\n    var splitTime = i == 0 ? 0 : this._game.rnd.frac() * randTime;\n    tween.to( { tint: tintColor }, flickerTime, Phaser.Easing.Linear.In, false, splitTime);\n\n    var nextTween = this._game.add.tween(this._overlay);\n    nextTween.to( { tint: defaultTint }, flickerTime, Phaser.Easing.Linear.In, false, randTime - splitTime);\n    tween.chain(nextTween);\n\n    tween = nextTween;\n    timeLeft -= randTime;\n  }\n  firstTween.start();\n};\n\nBattleUi.prototype.updateCredBar = function (value, isDamage) {\n  // damage indication\n  if (isDamage) {\n    this.flickerOverlay();\n  }\n  this.credText.displayObject.text = value;\n  var originalTint = this.credText.displayObject.tint;\n  var firstTween = this._game.add.tween(this.credText.displayObject);\n  firstTween.to({ tint: 0x970B26 }, 100, Phaser.Easing.Linear.In, false, 0);\n  var secondTween = this._game.add.tween(this.credText.displayObject);\n  secondTween.to({ tint: originalTint }, 500, Phaser.Easing.Linear.In, false, 0);\n  firstTween.chain(secondTween);\n  firstTween.start();\n};\n\nBattleUi.prototype.updatePersuasionBar = function () {\n  this.persuadeBar.setPercent(this._game.persuasion * 25);\n};\n\nBattleUi.prototype.cardsInputEnabled = function (isEnabled) {\n  for (var i = 0; i < this.playerDeckIcons.length; i++) {\n    this.playerDeckIcons[i].inputEnabled = isEnabled;\n  }\n  for (i = 0; i < this.companionIcons.length; i++) {\n    this.companionIcons[i].inputEnabled = isEnabled;\n  }\n};\n\nBattleUi.prototype.addTooltip = function (card, cardIdx, x, y) {\n  var playerCardIcon = this.playerDeckIcons[cardIdx];\n\n  var tooltip = function () {\n    var tooltipWidth = 250;\n    var tooltipHeight = 200;\n\n    var bmd = this._game.add.bitmapData(tooltipWidth, tooltipHeight);\n    bmd.ctx.beginPath();\n    bmd.ctx.rect(0, 0, tooltipWidth, tooltipHeight);\n    bmd.ctx.fillStyle = '#424d4f';\n    bmd.ctx.fill();\n\n    this._game.slickUI.add(this.tooltip = new SlickUI.Element.DisplayObject(\n      x,y, this._game.make.sprite(0, 0, bmd)));\n    this.tooltip.alpha = 0.8;\n\n    var nameTextStyle = { font: '14px Goudy Bookletter 1911', fill: '#48f2ff', wordWrap: true, wordWrapWidth: tooltipWidth, fontWeight: 'bold', boundsAlignH: 'center' };\n    var nameText = new SlickUI.Element.DisplayObject(0,0,\n      this._game.make.text(0,0, card.getName().toUpperCase(), nameTextStyle));\n    this.tooltip.add(nameText);\n    // for alignment purposes\n    var nameTextHeight = nameText.displayObject.getBounds().height;\n    nameText.displayObject.setTextBounds(0,0, tooltipWidth, tooltipHeight);\n\n    var descTextStyle = { font: '14px Open Sans', fill: '#48f2ff', wordWrap: true, wordWrapWidth: tooltipWidth, align: 'left' };\n    var descText = new SlickUI.Element.DisplayObject(\n      0, Math.round(nameTextHeight),\n      this._game.make.text(0,0, card.getDescription(), descTextStyle));\n    this.tooltip.add(descText);\n  };\n\n  var deleteTooltip = function () {\n    if (this.tooltip) {\n      this.tooltip.container.displayGroup.removeAll();\n    }\n    this.tooltip = undefined;\n  };\n\n  playerCardIcon.events.onInputDown.add(deleteTooltip, playerCardIcon);\n\n  // tooltip functions\n  playerCardIcon.events.onInputOver.add(tooltip, playerCardIcon);\n  playerCardIcon.events.onInputOut.add(deleteTooltip, playerCardIcon);\n\n};\n","'use strict';\n\nvar items = require('../../static/assets/items.json');\n\nfunction Card(game, x, y, assetName, multiUse = false) {\n  Phaser.Sprite.call(this, game, x, y, assetName);\n  this._game = game;\n  this.assetName = assetName;\n  this.key = assetName;\n  this.description = 'test';\n  this.multiUse = multiUse;\n}\n\nCard.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Card.prototype.constructor = Card;\n\nCard.prototype.getName = function () {\n  return items[this.key]['name'];\n};\n\nCard.prototype.getDescription = function () {\n  return items[this.key]['desc'];\n};\n","/*\n* Clickable\n* ====\n*\n* A sample prefab (extended game object class), displaying a clickable object in a room.\n*/\n\n'use strict';\n\nvar Toast = require('./Toast');\nvar items = require('../../static/assets/items.json');\n\nfunction Clickable(game, x, y, id, height, width) {\n  Phaser.Sprite.call(this, game, x, y, id);\n  this.height = height;\n  this.width = width;\n\n  this._game = game;\n  this.id = id;\n  this.name = items[this.id]['name'];\n  this.anchor.set(0.5);\n  this.alpha = 0.5;\n  this.inputEnabled = true;\n  this.input.useHandCursor = true;\n  this.events.onInputDown.add(click, this);\n  this.events.onInputOver.add(mouseover, this);\n  this.events.onInputOut.add(mouseout, this);\n\n  this.input.pixelPerfectOver = true;   // checks pixels so that collision only happens with non-transparent areas\n                                        // computationally expensive, but maybe necessary for realism purposes?\n}\n\nfunction click() {\n  this._game.sound.play('inventory-add');\n  this.destroy();\n  this._game.add.existing(new Toast(this._game, 'You\\'ve acquired ' + this.name + '!', 5));\n  this._game.player.inventory.push(this.id);\n  var items = this._game.room.area.items;\n  var remove_item = -1;\n  //because it is checking the id of the item and not the actual item\n  for (let i = 0; i < items.length; i++) {\n    if (items[i].id === this.id){\n      remove_item = i;\n    }\n  }\n  if (remove_item > -1) {\n    items.splice(remove_item, 1);\n  }\n  this._game.dialogueWindow.display(true); // refresh dialogue display, display instantly\n  this._game.memoryBankWindow.display();  // refresh memory bank display\n}\n\nfunction mouseover() {\n  this.alpha = 1;\n  this._game.add.existing(this.toast = new Toast(this._game, this.name, 5));\n}\n\nfunction mouseout() {\n  if (this.toast) {\n    this.toast.toast.container.displayGroup.removeAll();\n    this.toast.destroy();\n  }\n}\n\nClickable.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Clickable.prototype.constructor = Clickable;\n","/*\n * ConversationManager\n * ===================\n *\n * Handles loading JSON assets for conversation and managing conversation state\n */\n\n'use strict';\n\nmodule.exports = ConversationManager;\n\nvar npcs = require('../../static/assets/npcs.json');\n\nfunction ConversationManager(game, customActions/*, ...args*/) {\n  // PROPERTIES:\n  // - conversation - json conversation\n\n  this._game = game;\n  this.customActions = customActions;\n\n  this.conversation = null;\n  this.idx = 0;\n  this.shown = [];\n}\nConversationManager.prototype.constructor = ConversationManager;\n\n/* Assumes JSON has already been loaded into cache!\n * Use game.load.json otherwise\n */\nConversationManager.prototype.loadJSONConversation = function (jsonKey) {\n  var json = this._game.cache.getJSON(jsonKey);\n\n  this.conversation = json;\n\n  if (this._game.areaTransitionWindow !== null \n    && typeof this._game.areaTransitionWindow !== 'undefined') {\n    this._game.areaTransitionWindow.disable();\n  }\n  //the player object will initialize the start index of a conversation\n  // at the end of a conversation the index will return to 0\n  // so that the next file will start at the begining.\n\n};\n\nConversationManager.prototype.getCurrentText = function () {\n  if (this.conversation === null) {\n    return '';\n  }\n\n  return this.conversation[this.idx]['text'];\n};\n\nConversationManager.prototype.getResponses = function () {\n  if (!this.conversation === null) {\n    return [''];\n  }\n  var responses = this.conversation[this.idx]['responses'];\n  var ret = [];\n  for (var i = 0; i < responses.length; i++) {\n    //check showOnce of target node\n    if (this.shown.indexOf(responses[i]['target']) > -1) {    // this node is marked \"show once\" and has already been shown\n      continue;\n    }\n    //check conditions on response\n    if ('conditions' in responses[i]) {\n      var conditionsNeeded = 0;\n      var conditionsMet = 0;\n      for (var condition in responses[i]['conditions']) {\n        if (this.checkCondition(this._game, condition, responses[i]['conditions'][condition])) {\n          conditionsMet++;\n        }\n        conditionsNeeded++;\n      }\n      if (conditionsMet >= conditionsNeeded) {\n        ret.push(responses[i]); //if all conditions are met, display response\n      }\n    } else {\n      ret.push(responses[i]);   //no conditions on this response, display it\n    }\n  }\n\n  return ret;\n};\n\nConversationManager.prototype.checkCondition = function(game, condition, value) {\n  if (condition.startsWith('var')) {\n    var variable = condition.substring(3);\n    if (value.startsWith('!')) {\n      if (!(variable in game.player.variables) || game.player.variables[variable] !== value.substring(1)) {\n        return true;    //player does not have this variable set, or has it set to a different value\n      }\n    } else if (variable in game.player.variables && game.player.variables[variable] === value) {\n      return true;      //player has this variable set to this value\n    }\n  } else if (condition.startsWith('inv')) {\n    var item = condition.substring(3);\n    if (value.startsWith('!')) {\n      if (game.player.inventory.indexOf(item) === -1) {\n        return true;    //player does not have this inventory item\n      }\n    } else if (game.player.inventory.indexOf(item) > -1) {\n      return true;      //player has this inventory item\n    }\n  } else if (condition.startsWith('seen')) {\n    var visited = value.split(' ');\n    var visitedAll = true;\n    for (var i = 0; i < visited.length; i++) {\n      if (this.shown.indexOf(parseInt(visited[i])) === -1) {\n        visitedAll = false;\n      }\n    }\n    return visitedAll;\n  }\n  return false;\n};\n\nConversationManager.prototype.getSpeaker = function () {\n  if (this.conversation === null) {\n    return [''];\n  }\n\n  return npcs[this.conversation[this.idx]['speaker']]['name'];\n};\n\nConversationManager.prototype.getAvatar = function() {\n  if (this.conversation === null) {\n    return [''];\n  }\n\n  return npcs[this.conversation[this.idx]['speaker']]['avatar'];\n};\n\nConversationManager.prototype.takeActions = function() {\n  if (this.conversation === null) {\n    return;\n  }\n\n  if (this.conversation[this.idx]['showOnce'] === 1 && !this.shown.includes(this.idx)) {\n    //if save at this point keeps getting resaved.\n    this.shown.push(this.idx);\n  }\n\n  if (this.conversation[this.idx]['actions'].length === 0) {\n    return;\n  }\n\n  for (var action in this.conversation[this.idx]['actions']) {\n    this.takeAction(this._game, action, this.conversation[this.idx]['actions'][action]);\n  }\n  return;\n};\n\nConversationManager.prototype.takeAction = function(game, action, value) {\n  if (action.startsWith('var')) {\n    var variable = action.substring(3);\n    if (value.startsWith('!')) {\n      delete game.player.variables[variable]; //remove variable from\n    } else {\n      game.player.variables[variable] = value;  //set variable on player\n    }\n  } else if (action.startsWith('inv')) {\n    var item = action.substring(3);\n    if (value.startsWith('!')) {\n      if (!(item in game.player.inventory)) {\n        var index = game.player.inventory.indexOf(item);\n        if (index > -1) {\n          game.player.inventory.splice(index, 1); //remove item from player inventory\n        }\n      }\n    } else {\n      game.player.inventory.push(item); //add item to player inventory\n    }\n  } else if (action === 'custom') {\n    this.customActions.customAction(value);\n  }\n};\n\nConversationManager.prototype.endConversation = function() {\n  if (this.conversation === null) {\n    return;\n  }\n\n  for (var i = 0; i < this._game.room.npcs.length; i++) {\n    var npc = this._game.room.npcs[i];\n    npc.show();\n  }\n    \n  if ('onEnd' in this.conversation) {\n    this.customActions.customAction(this.conversation['onEnd']);\n  }\n\n  this.shown = [];\n  this.idx = 0;\n  //think this is a cyclic ref. TODO: fix \n  this._game.dialogueWindow.convoFile = null;\n  this._game.areaTransitionWindow.enable();\n};\n\nConversationManager.prototype.advanceToTarget = function (targetIdx) {\n  this.idx = targetIdx;\n  return true;  // returns whether should refresh display.\n};\n\nConversationManager.prototype.update = function () {\n  // TODO: Stub.\n};\n","/*\n* DialogueWindow\n* ==============\n*\n* Handles displaying dialogue (conversation data) to screen\n*/\n\n'use strict';\n\nmodule.exports = DialogueWindow;\n\nvar Scrollbar = require('./Scrollbar');\nvar textstyles = require('../../static/assets/textstyles.json');\n\nfunction DialogueWindow(game, convoManager/*, ...args*/) {\n  Phaser.Group.call(this, game/*, ...args*/);\n\n  // PROPERTIES\n  // - dialogPanel\n  // - speakerText\n  // - dialogText\n  // - convoManager (passed in ConversationManager)\n  // - dialogWidth\n  // - dialogHeight\n  // - buttons\n\n  this.convoManager = convoManager;\n  // messy, but useful if we need a reference to the game\n  this._game = game;\n\n  /* SIGNALS */\n  // private\n  this._onDialogTextFinished = new Phaser.Signal(); // when the char-by-char display finishes\n\n  // private members specifying margin and padding\n  this._dialogTextOriginX = 96;\n  this._dialogTextOriginY = 60;\n  this._dialogPadding = 32;\n\n  // speaker avatar display\n  game.slickUI.add(this.avatar = new SlickUI.Element.DisplayObject(\n    400, 100, game.make.sprite(0, 0, 'invisible'),\n    400, 500));\n\n  this.dialogHeight = game.height * 3 / 8 /* 3/8 height */ - this._dialogPadding / 2;\n  this.dialogWidth = game.width - this._dialogPadding;\n\n  // dialog text dimensions (private)\n  this._dialogTextHeight = this.dialogHeight - this._dialogTextOriginY - 18;\n  this._dialogTextWidth = this.dialogWidth - 185;\n\n  // window coordinates\n  var dialogX = this._dialogPadding / 2;\n  var dialogY = game.height * 5 / 8;  // 5/8 down\n\n  game.slickUI.add(\n    this.dialogPanel = new SlickUI.Element.DisplayObject(\n      dialogX, dialogY, game.make.sprite(0,0, 'dialogue-panel'),\n      this.dialogWidth, this.dialogHeight));\n  this.dialogPanel.displayObject.width = this.dialogWidth;\n  this.dialogPanel.displayObject.height = this.dialogHeight;\n\n  // actual window contents\n  var speakerX = this._dialogPadding + 64;\n  var speakerY = this._dialogPadding / 4;\n  this.dialogPanel.add(\n    this.speakerText = new SlickUI.Element.DisplayObject(\n      Math.round(speakerX), speakerY,\n      game.make.text(0, 0, 'Speaker', textstyles['speaker'])));\n\n  // using a mask for scrolling purposes\n  this._scrollMask = game.make.graphics(0, 0);\n  this._scrollMask.beginFill(0xffffff);\n  this._scrollMask.drawRect( this._dialogTextOriginX, this._dialogTextOriginY, this._dialogTextWidth, this._dialogTextHeight );\n  this._scrollMask.endFill();\n\n  var bodyStyle = textstyles['dialogueBody'];\n  bodyStyle.wordWrapWidth = this._dialogTextWidth;\n  this.dialogPanel.add(\n    this.dialogText = new SlickUI.Element.DisplayObject(this._dialogTextOriginX, this._dialogTextOriginY, \n      game.make.text(0, 0, 'placeholder text', bodyStyle)));\n  this.dialogText.displayObject.lineSpacing = 0;\n\n  this.dialogPanel.add(new SlickUI.Element.DisplayObject(0, 0, this._scrollMask));\n  this.dialogText.displayObject.mask = this._scrollMask;\n\n  this.dialogPanel.alpha = 0.8;\n\n  // for removing player choice buttons\n  this.buttons = [];\n  this.buttonTweens = [];\n  // slider for scrolling overflow\n  this.slider = null;\n  // stores each button Y value\n  // also keeps track of how low our content goes; last element is content bottom\n  this._buttonsY = [];\n\n  //for keeping track of whether the avatar needs to be updated (performance intensive)\n  this.avatarName = 'invisible';\n\n  // will track the conversation file, so that save checkpoints will\n  // go to the correct area in the conversation\n  this.convoFile = null;\n\n  // for rendering lines character by character\n  this.charTimer = null;\n}\n\nDialogueWindow.prototype = Object.create(Phaser.Group.prototype);\nDialogueWindow.prototype.constructor = DialogueWindow;\n\nDialogueWindow.prototype.begin = function(jsonKey) {\n  if (jsonKey) {\n    this.loadJSONConversation(jsonKey);\n    this.show();\n    this.display();\n  } else {\n    this.hide();\n  }\n};\n\nDialogueWindow.prototype.loadJSONConversation = function (jsonKey) {\n  if (jsonKey) {\n    this.convoFile = jsonKey;\n    this.convoManager.loadJSONConversation(jsonKey);\n  }\n};\n\nDialogueWindow.prototype.display = function (displaysInstant = false \n                              /* by default, not set to display text instantly */) {\n  this.cleanWindow();\n  if (this.convoFile) {\n    this.takeActions();\n    this.displayAvatar();\n\n    // On finishing the dialog text display, display our responses\n    // Added before our actual display call in case we display instantly\n    this._onDialogTextFinished.add(function () {\n      this.displayResponses();\n      this._onDialogTextFinished.removeAll();\n    }, this);\n    this.displayText(displaysInstant);\n  }\n};\n\nDialogueWindow.prototype.cleanWindow = function () {\n  // stop all button tweens\n  for (var i = 0; i < this.buttonTweens.length; i++) {\n    this.buttonTweens[i].stop();\n  }\n\n  // remove all buttons\n  for (var j = 0; j < this.buttons.length; j++) {\n    var button = this.buttons[j];\n    button.container.displayGroup.removeAll(true);\n    button.container.displayGroup.destroy();\n    button.container.children = [];\n    button.container = undefined;\n    button.sprite = undefined;\n  }\n  this.buttons = [];\n  this._buttonsY = [];\n\n  // remove scroller and restore dialog text position\n  if (this.slider !== null) {\n    this.slider.destroy();\n    this.slider = null;\n  }\n  this.dialogText.y = this._dialogTextOriginY;\n  this.dialogText.displayObject.inputEnabled = false;\n  this.dialogText.displayObject.events.onInputOver.removeAll();\n  this.dialogText.displayObject.events.onInputOut.removeAll();\n  this._game.input.mouse.mouseWheelCallback = null;\n};\n\nDialogueWindow.prototype.takeActions = function() {\n  this.convoManager.takeActions(this._game);\n};\n\n// if avatar needs to change, fade out the current one and fade in the new one\nDialogueWindow.prototype.displayAvatar = function() {\n  var speaker = this.convoManager.getAvatar();\n  var fadeOut = 200;\n  var fadeIn = 200;\n  if (speaker !== this.avatarName) {\n    var fadeInTween = this._game.add.tween(this.avatar);\n    fadeInTween.to({alpha: 0}, fadeOut, Phaser.Easing.Linear.None, true);\n    fadeInTween.onComplete.add(function() {\n      this.avatar.displayObject.loadTexture(speaker);\n      this._game.add.tween(this.avatar).to({alpha: 1}, fadeIn, Phaser.Easing.Linear.None, true);\n    }, this);\n    this.avatarName = speaker;\n  }\n};\n\nDialogueWindow.prototype.displayText = function (displaysInstant) {\n  this.speakerText.displayObject.text = this.convoManager.getSpeaker().toUpperCase();\n  this.dialogText.displayObject.mask = this._scrollMask;\n\n  if (displaysInstant) {\n    this.dialogText.displayObject.text = this.convoManager.getCurrentText();\n    if (this.charTimer != null) {\n      this._game.time.events.remove(this.charTimer);  // stop characters from rendering one by one, if they are currently rendering\n    }\n    this._onDialogTextFinished.dispatch();\n    return;\n  }\n\n  // character-by-character display\n  this.displayCurrentLine();\n  \n};\n\nDialogueWindow.prototype.displayResponses = function () {\n  // start rendering buttons at the bottom of dialogue\n  var responses = this.convoManager.getResponses(this._game);\n\n  var textBottom = this._dialogTextOriginY + this.dialogText.displayObject.getBounds().height;\n  this.nextButtonY = textBottom;\n\n  if (responses.length === 0) {\n    // no responses - waiting on player to do something to progress\n    var waitButton = this.addChoiceButton(this._dialogTextOriginX, this.nextButtonY,\n      'END', null);\n    waitButton.visible = false;\n    this.buttons.push(waitButton);\n  }\n\n  this.buttonTweens = [];\n\n  for (var i = 0; i < responses.length; i++) {\n    // pass along special parameters, if any\n    var params = [];\n    if ('params' in responses[i]) {\n      params = responses[i]['params'];\n    }\n\n    // keep track of buttons to be deleted\n    var responseDelay = 250;\n    var button = this.addChoiceButton(\n      this._dialogTextOriginX, this.nextButtonY,\n      responses[i]['text'], responses[i]['target'], params);\n    button.alpha = 0;\n    var tween = this._game.add.tween(button).to({alpha: 1}, responseDelay, Phaser.Easing.Linear.None, true, responseDelay * i);\n    if (i === responses.length - 1) {\n      tween.onComplete.add(function() {\n        this.addOverflowScroll();\n      }, this);\n    }\n    this.buttonTweens.push(tween);  // for deletion later\n    this.buttons.push(button);\n    this._buttonsY.push(button.y);\n    this.nextButtonY += button.sprite.height;\n  }\n\n  // last element is bottom of content\n  this._buttonsY.push(this.nextButtonY);\n};\n\nDialogueWindow.prototype.addChoiceButton = function (x, y, responseTextField, responseTarget, responseParams = []) {\n  // display text\n  var buttonSidePadding = 32;\n  var buttonTextStyle = textstyles['choiceButton'];\n  buttonTextStyle.wordWrapWidth = this._dialogTextWidth - buttonSidePadding;\n  var responseText = this._game.make.text(0, 0, responseTextField, buttonTextStyle);\n  var buttonText = new SlickUI.Element.DisplayObject(\n    Math.round(this._dialogTextWidth / 2 - responseText.width / 2),0, /* center text */\n    responseText);\n\n  // add to sized button\n  var choiceButton;\n  this.dialogPanel.add(choiceButton = new SlickUI.Element.DisplayObject(\n    x, y,\n    this._game.make.button(0,0, 'dialogue-choice-button'),\n    this.dialogWidth, responseText.height));\n  choiceButton.add(buttonText);\n  choiceButton.sprite.width = this._dialogTextWidth;\n  choiceButton.sprite.height = responseText.height;\n\n  // end of conversation. action deletes window\n  if (responseTarget < 0) {\n    choiceButton.events.onInputUp.add(\n      function () {\n        this.dialogueWindow.hide();\n        this.dialogueWindow.convoManager.endConversation();  // take any actions that trigger when this conversation ends\n      }, {dialogueWindow: this});\n  }\n\n  choiceButton.events.onInputUp.add(\n    function () {\n      var shouldRefresh = this.dialogueWindow.convoManager.advanceToTarget(\n        this.responseTarget, this.responseParams);\n      if (shouldRefresh)\n        this.dialogueWindow.display();\n    }, {dialogueWindow: this, responseTarget: responseTarget, responseParams: responseParams});\n  // add mask\n  choiceButton.sprite.mask = this._scrollMask;\n  buttonText.displayObject.mask = this._scrollMask;\n\n  return choiceButton;\n};\n\nDialogueWindow.prototype.addOverflowScroll = function () {\n  // can we fit everything in the current window?\n  var heightDiff = this._buttonsY[this._buttonsY.length - 1]\n    - (this._dialogTextOriginY + this._dialogTextHeight);\n  // add a slider otherwise\n  if (heightDiff > 0) {\n\n    var scrolllineWidth = 1.5;\n    this.slider = new Scrollbar(\n      this._game,\n      this._dialogTextOriginX + this._dialogTextWidth + this._dialogPadding - scrolllineWidth,\n      this._dialogTextOriginY - scrolllineWidth,\n      this.dialogPanel, // parent\n      {\n        'x': [0, this._dialogPadding, 0],\n        'y': [0, this._dialogTextHeight / 2, this._dialogTextHeight]\n      },\n      heightDiff, scrolllineWidth);\n\n    var scrollCallback = function (value) {\n      // mapping height differences to scroll values\n      var scrollValue = heightDiff*value;\n      this.dialogText.y = this._dialogTextOriginY - scrollValue;\n      for (var i = 0; i < this.buttons.length; i++) {\n        // slide all buttons up\n        this.buttons[i].y = this.dialogPanel.y + this._buttonsY[i] - scrollValue;\n      }\n    };\n\n    this.slider.onDrag.add(scrollCallback, this);\n    this.slider.onSetValue.add(scrollCallback, this);\n\n    // Mouse wheel events\n    this.dialogText.displayObject.inputEnabled = true;\n    this.dialogText.displayObject.events.onInputOver.add(\n      function () { this._dialogOver = true; }, this);\n    this.dialogText.displayObject.events.onInputOut.add(\n      function () { this._dialogOver = false; }, this);\n    this._game.input.mouse.mouseWheelCallback = (function (event) {\n      if (!this._dialogOver)\n        return;\n      this.slider.value += (1/heightDiff) * event.deltaY;\n    }).bind(this);\n  }\n};\n\nDialogueWindow.prototype.showAvatar = function() {\n  var fadeInTween = this._game.add.tween(this.avatar);\n  var fadeIn = 200;\n  fadeInTween.to({alpha: 1}, fadeIn, Phaser.Easing.Linear.None, true);\n};\n\nDialogueWindow.prototype.hideAvatar = function() {\n  var fadeOutTween = this._game.add.tween(this.avatar);\n  var fadeOut = 200;\n  fadeOutTween.to({alpha: 0}, fadeOut, Phaser.Easing.Linear.None, true);\n};\n\nDialogueWindow.prototype.show = function() {\n  this.dialogPanel.visible = true;\n  this.showAvatar();\n};\n\nDialogueWindow.prototype.hide = function () {\n  this.cleanWindow();\n  this.dialogPanel.visible = false;\n  this.hideAvatar(); //hide avatar\n};\n\nDialogueWindow.prototype.displayCurrentLine = function () {\n\n  var line = this.convoManager.getCurrentText();\n  this.dialogText.displayObject.text = '';\n\n  //  Split the current line on characters, so one char per array element\n  var split = line.split('');\n\n  //  Reset the word index to zero (the first word in the line)\n  this._cIndex = 0;\n\n  // Add an option to skip the text on clicking down.\n  this.dialogPanel.displayObject.inputEnabled = true;\n  this.dialogPanel.events.onInputDown.add(this.skipText, this);\n\n  var nextChar = function () {\n    // TODO: make this a selectable option\n    var delay = 3;\n    \n    this.dialogText.displayObject.text =\n      this.dialogText.displayObject.text.concat(split[this._cIndex]);\n    if (split[this._cIndex] === ',') {\n      delay = 200;    // brief pause on commas\n    } else if (['.', '?', '!'].indexOf(split[this._cIndex]) > -1) {\n      delay = 300;    // longer pause after each sentence\n    }\n    this._cIndex++;\n    if (this._cIndex == split.length) {\n      // Tell the window when we're done\n      this._onDialogTextFinished.dispatch();\n      this.charTimer = null;\n    } else {\n      // Add the next event in the chain\n      this.charTimer = this._game.time.events.add(delay, nextChar, this);\n    }\n  };\n\n  //  Call the 'nextChar' function and chain until it reaches the end of the line\n  this.charTimer = this._game.time.events.add(0, nextChar, this);\n\n};\n\nDialogueWindow.prototype.skipText = function () {\n  this._game.time.removeAll();\n  this.displayText(true);\n  this.dialogPanel.events.onInputDown.removeAll();\n};\n\nDialogueWindow.prototype.update = function () {\n  // TODO: Stub.\n};\n","/**\nCopyright (c) 2015 Belahcen Marwane (b.marwane@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvar HealthBar = function(game, providedConfig) {\n  this.game = game;\n\n  this.setupConfiguration(providedConfig);\n  this.setPosition(this.config.x, this.config.y);\n  this.drawBackground();\n  this.drawHealthBar();\n  this.setFixedToCamera(this.config.isFixedToCamera);\n};\nHealthBar.prototype.constructor = HealthBar;\n\nHealthBar.prototype.setupConfiguration = function (providedConfig) {\n  this.config = this.mergeWithDefaultConfiguration(providedConfig);\n  this.flipped = this.config.flipped;\n};\n\nHealthBar.prototype.mergeWithDefaultConfiguration = function(newConfig) {\n  var defaultConfig= {\n    width: 250,\n    height: 40,\n    x: 0,\n    y: 0,\n    bg: {\n      color: '#808080'\n    },\n    bar: {\n      color: '#651828'\n    },\n    animationDuration: 200,\n    flipped: false,\n    isFixedToCamera: false\n  };\n    \n  if(newConfig.flipped) {\n    defaultConfig.bg.color = '#651828';\n    defaultConfig.bar.color = '#808080';\n  }\n    \n  return mergeObjects(defaultConfig, newConfig);\n};\n\nfunction mergeObjects(targetObj, newObj) {\n  for (var p in newObj) {\n    try {\n      targetObj[p] = newObj[p].constructor==Object ? mergeObjects(targetObj[p], newObj[p]) : newObj[p];\n    } catch(e) {\n      targetObj[p] = newObj[p];\n    }\n  }\n  return targetObj;\n}\n\nHealthBar.prototype.drawBackground = function() {\n\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bg.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n\n  this.bgSprite = this.game.add.sprite(this.x, this.y, bmd);\n  this.bgSprite.anchor.set(0.5);\n\n  if(this.flipped){\n    this.bgSprite.scale.x = -1;\n  }\n};\n\nHealthBar.prototype.drawHealthBar = function() {\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bar.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n\n  this.barSprite = this.game.add.sprite(this.x - this.bgSprite.width/2, this.y, bmd);\n  this.barSprite.anchor.y = 0.5;\n\n  if(this.flipped){\n    this.barSprite.scale.x = -1;\n  }\n};\n\nHealthBar.prototype.setPosition = function (x, y) {\n  this.x = x;\n  this.y = y;\n\n  if(this.bgSprite !== undefined && this.barSprite !== undefined){\n    this.bgSprite.position.x = x;\n    this.bgSprite.position.y = y;\n\n    this.barSprite.position.x = x - this.config.width/2;\n    this.barSprite.position.y = y;\n  }\n};\n\n\nHealthBar.prototype.setPercent = function(newValue){\n  if (newValue < 0) newValue = 0;\n  if (newValue > 100) newValue = 100;\n\n  var newWidth = (newValue * this.config.width) / 100;\n\n  this.setWidth(newWidth);\n};\n\nHealthBar.prototype.setWidth = function(newWidth){\n  if (this.flipped) {\n    newWidth = -1 * newWidth;\n  }\n  this.game.add.tween(this.barSprite).to( { width: newWidth }, this.config.animationDuration, Phaser.Easing.Linear.None, true);\n};\n\nHealthBar.prototype.setFixedToCamera = function(fixedToCamera) {\n  this.bgSprite.fixedToCamera = fixedToCamera;\n  this.barSprite.fixedToCamera = fixedToCamera;\n};\n\nHealthBar.prototype.kill = function() {\n  this.bgSprite.kill();\n  this.barSprite.kill();\n};\n\nmodule.exports = HealthBar;\n","/*\n * Icon\n * ====\n *\n * Icon base class (masked sprite group)\n */\n\n'use strict';\n\nmodule.exports = Icon;\n\nfunction Icon(game, x, y, asset, mask, border, width = 100.0/*, TODO: height = 100.0 ...args*/) {\n  Phaser.Sprite.call(this, game, x, y, asset/*, ...args*/);\n\n  // PROPERTIES\n  // - maskSprite\n  this.maskSprite;\n  // - borderSprite\n  this.borderSprite;\n  // - asset key\n  this.id = asset;\n\n  this._game = game;\n  // expands borders of mask slightly\n  var scaleRelax = 1.05;\n\n  if (typeof mask !== 'undefined' && mask !== null) {\n    this.maskSprite = game.make.sprite(x,y, mask);\n\n    this.maskSprite.scale.setTo(this.width*scaleRelax / this.maskSprite.width);\n\n    var maskedBmd = game.make.bitmapData(this.maskSprite.width, this.maskSprite.height);\n    maskedBmd.alphaMask(this, this.maskSprite);\n    // replace main sprite with bitmap data mask\n    this.loadTexture(maskedBmd);\n  }\n\n  this.scale.setTo(width / this.width);\n  var parentScale = this.scale.x;\n\n  if (typeof border !== 'undefined' && border !== null) {\n    this.borderSprite = game.make.sprite(0,0, border);\n    this.addChild(this.borderSprite);\n    this.borderSprite.scale.setTo((width / this.borderSprite.width) / parentScale);\n  }\n\n}\n\nIcon.prototype = Object.create(Phaser.Sprite.prototype);\nIcon.prototype.constructor = Icon;\n\nIcon.prototype.update = function () {\n  var i = this.children.length;\n  while (i--) {\n    this.getChildAt(i).update();\n  }\n};\n","/*\n * MemoryBankWindow\n * ===============\n *\n * UI window for the memory bank\n */\n\n'use strict';\n\nvar items = require('../../static/assets/items.json');\nvar Icon = require('./Icon');\n\nmodule.exports = MemoryBankWindow;\n\nfunction memoryBankButtonToggle() {\n  // unresponsive while animating\n  if (this._isTweening)\n    return;\n\n  this._isTweening = true;\n  var timeToTween = 500;  // milliseconds\n\n  // hide panel\n  if (this.panel.visible) {\n    this._game.sound.play('swish-close');\n    this._game.add.tween(this.panel).to(\n        {x: this._baseX + this.panelWidth + this._memoryPadding}, timeToTween, Phaser.Easing.Exponential.Out, true\n      ).onComplete.add(\n        function () {\n          this.panel.visible = false;\n          this._isTweening = false;\n        }, this\n      );\n    return;\n  }\n\n  // show panel\n\n  // if area transition window is open, close it\n  if (this._game.areaTransitionWindow.panel.visible) {\n    this._game.areaTransitionWindow.panel.visible = false;\n  }\n  this.panel.visible = true;\n  this.display();\n\n  this.panel.x = this._baseX + this.panelWidth + this._memoryPadding;\n  this._game.sound.play('swish-open');\n  this._game.add.tween(this.panel).to(\n      {x: this._baseX}, timeToTween, Phaser.Easing.Exponential.Out, true\n    ).onComplete.add(function () { this._isTweening = false; }, this);\n}\n\nfunction MemoryBankWindow(game/*, ...args*/) {\n  Phaser.Group.call(this, game/*, ...args*/);\n\n  this._game = game;\n\n  // private members specifying margin and padding\n  this._memoryTextOriginX = 100;\n  this._memoryTextOriginY = 155;\n  this._memoryPadding = 32;\n  this._itemOriginX = 80;\n  this._itemOriginY = 25;\n  this._baseX = this._memoryPadding / 2;\n  this._baseY = this._memoryPadding * 2;\n\n  // memory bank window dimensions\n  this.panelHeight = game.height * 1/2 - this._memoryPadding / 2;\n  this.panelWidth = game.width - this._memoryPadding;\n  this._rowCapacity = 5;  // items per row\n  this._itemStart = 0;  // determines which row to show\n\n  // window-dependent private member dimensions\n  this._memoryTextWidth = this.panelWidth - 185;\n  this._itemPadding = this.panelWidth / 50;\n  this._nextOriginX = this.panelWidth - 55;\n  this._nextOriginY = 0;\n  this._prevOriginX = -18;\n  this._prevOriginY = 0;\n\n  /**\n   * Panel\n   */\n\n  game.slickUI.add(\n    this.panel = new SlickUI.Element.DisplayObject(\n      this._baseX, this._baseY, game.make.sprite(0,0, 'memory-bank'),\n      this.panelWidth, this.panelHeight));\n  this.panel.displayObject.width = this.panelWidth;\n  this.panel.displayObject.height = this.panelHeight;\n\n  // by default, not displayed\n  this.panel.visible = false;\n  this.panel.alpha = 0.8;\n\n  /**\n   * Toggle button\n   */\n  // until you click on the toggle button\n  game.slickUI.add(\n    this.toggleButton = new SlickUI.Element.DisplayObject(\n      0,this._memoryPadding, game.make.button(0,0, 'memory-bank-button')));\n  // set scale such that width = 1/8 panel width\n  this.toggleButton.displayObject.scale.setTo(\n    (this.panelWidth / 8) / this.toggleButton.displayObject.width);\n  this.toggleButton.x = game.width - this._memoryPadding - this.toggleButton.displayObject.width;\n  // show panel callback\n  this.toggleButton.events.onInputDown.add(memoryBankButtonToggle, this);\n  this.toggleButton.alpha = 0.9;\n\n  /**\n   * Text - name and description\n   */\n  var nameTextStyle = { font: '14px Goudy Bookletter 1911', fill: '#48f2ff', wordWrap: true, wordWrapWidth: this._memoryTextWidth, fontWeight: 'bold', boundsAlignH: 'center' };\n  this.panel.add(\n    this.nameText = new SlickUI.Element.DisplayObject(\n      this._memoryTextOriginX,\n      this._memoryTextOriginY,\n      game.make.text(0,0, '', nameTextStyle), this._memoryTextWidth));\n  // for alignment purposes\n  var nameTextHeight = this.nameText.displayObject.getBounds().height;\n  this.nameText.displayObject.setTextBounds(0,0, this._memoryTextWidth, nameTextHeight);\n\n  var descTextStyle = { font: '14px Open Sans', fill: '#48f2ff', wordWrap: true, wordWrapWidth: this._memoryTextWidth, align: 'left' };\n  this.panel.add(\n    this.descText = new SlickUI.Element.DisplayObject(\n      this._memoryTextOriginX,\n      this._memoryTextOriginY + nameTextHeight,\n      game.make.text(0,0, '', descTextStyle), this._memoryTextWidth));\n\n  /**\n   * Bookkeeping\n   */\n  // are we currently animating?\n  this._isTweening = false;\n  this._itemDisplayObjects = []; // for deletion purposes\n  this._navButtons = [];\n}\n\nMemoryBankWindow.prototype = Object.create(Phaser.Group.prototype);\nMemoryBankWindow.prototype.constructor = MemoryBankWindow;\n\nMemoryBankWindow.prototype.display = function () {\n  this.cleanWindow();\n  this.displayItems();\n  this.showNavButtons();\n};\n\nMemoryBankWindow.prototype.cleanWindow = function () {\n  for (var i = 0; i < this._itemDisplayObjects.length; i++) {\n    var item = this._itemDisplayObjects[i];\n    item.container.displayGroup.removeAll(true);\n    item.container.displayGroup.destroy();\n  }\n  for (i = 0; i < this._navButtons.length; i++) {\n    var navButton = this._navButtons[i];\n    navButton.container.displayGroup.removeAll(true);\n    navButton.container.displayGroup.destroy();\n  }\n  this._itemDisplayObjects = [];\n  this._navButtons = [];\n};\n\nMemoryBankWindow.prototype.displayItems = function () {\n  var inventory = this._game.player.inventory;\n\n  var itemEnd = this._itemStart + this._rowCapacity < inventory.length\n    ? this._itemStart + this._rowCapacity\n    : inventory.length;\n\n  // Assumes InventoryItem objects in inventory.\n  for (var i = this._itemStart; i < itemEnd; i++) {\n    var itemId = inventory[i];\n\n    // scaled width = 1/7 panel width;\n    var desiredWidth = (this.panelWidth / 7);\n    var itemIcon = new Icon(this._game, 0,0,\n      itemId, 'memory-bank-icon-mask', 'memory-bank-icon' /* border */, desiredWidth);\n\n    var slickItem;\n    this.panel.add(slickItem = new SlickUI.Element.DisplayObject(\n      this._itemOriginX + (i - this._itemStart)*(this._itemPadding + desiredWidth), this._itemOriginY,\n      itemIcon));\n\n    itemIcon.inputEnabled = true;\n    itemIcon.input.useHandCursor = true;\n    itemIcon.events.onInputOver.add(function () {\n      this.nameText.displayObject.text = items[this.itemId]['name'].toUpperCase();\n      this.descText.displayObject.text = items[this.itemId]['desc'];\n    }, {nameText: this.nameText, descText: this.descText, itemId: itemId});\n\n    this._itemDisplayObjects.push(slickItem);\n  }\n};\n\nMemoryBankWindow.prototype.showNavButtons = function () {\n  // next buttons\n  if (this._itemStart + this._rowCapacity < this._game.player.inventory.length) {\n    var nextButton = this._game.make.button(0,0,'memory-bank-next');\n    var slickNext;\n    this.panel.add(slickNext = new SlickUI.Element.DisplayObject(\n      this._nextOriginX, this._nextOriginY, nextButton));\n    // scaled by height, equal to panel height\n    nextButton.scale.setTo(this.panelHeight / nextButton.height);\n    this._navButtons.push(slickNext);\n\n    nextButton.events.onInputUp.add(function () {\n      this.switchRow(true);\n      this.display();\n    }, this);\n\n  }\n\n  // prev buttons\n  if (this._itemStart > 0) {\n    var prevButton = this._game.make.button(0,0,'memory-bank-next');\n    // rotate sprite\n    prevButton.anchor.setTo(0.5, 0.5);\n    prevButton.scale.y *= -1;\n    prevButton.anchor.setTo(1,1);\n\n    var slickPrev;\n    this.panel.add(slickPrev = new SlickUI.Element.DisplayObject(\n      this._prevOriginX, this._prevOriginY,\n      prevButton));\n    this._navButtons.push(slickPrev);\n\n    prevButton.scale.setTo(this.panelHeight / prevButton.height);\n\n    prevButton.events.onInputUp.add(function () {\n      this.switchRow(false);\n      this.display();\n    }, this);\n\n  }\n};\n\nMemoryBankWindow.prototype.switchRow = function (wantsNextRow) {\n  var inventory = this._game.player.inventory;\n  if (wantsNextRow && this._itemStart + this._rowCapacity < inventory.length) {\n    this._itemStart += this._rowCapacity;\n    return;\n  }\n  if (!wantsNextRow && this._itemStart - this._rowCapacity >= 0) {\n    this._itemStart -= this._rowCapacity;\n    return;\n  }\n};\n\nMemoryBankWindow.prototype.update = function () {\n  // TODO: Stub.\n};\n","/*\n * NPC\n * ====\n *\n * A sample prefab (extended game object class), displaying an NPC in a room.\n */\n\n'use strict';\n\nvar npcs = require('../../static/assets/npcs.json');\nvar Toast = require('./Toast');\n\nfunction NPC(game, x, y, id, height, width) {\n  this.id = id;\n  this.img = npcs[id]['image'];\n  Phaser.Sprite.call(this, game, x, y, this.img);\n  this.height = height;\n  this.width = width;\n  this.name = npcs[id]['name'];\n\n  this._game = game;\n  this.conv = npcs[id]['conv'];\n  this.anchor.set(0.5);\n  this.inputEnabled = true;\n  this.input.useHandCursor = true;\n  this.events.onInputDown.add(click, this);\n  this.events.onInputOver.add(mouseover, this);\n  this.events.onInputOut.add(mouseout, this);\n\n  this.input.pixelPerfectOver = true;   // checks pixels so that collision only happens with non-transparent areas\n                                        // computationally expensive, but maybe necessary for realism purposes?\n}\n\nNPC.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = NPC.prototype.constructor = NPC;\n\nfunction click() {\n  this.hide();\n  this._game.dialogueWindow.begin(this.conv);\n}\n\nfunction mouseover() {\n  this._game.add.existing(this.toast = new Toast(this._game, this.name, 5));\n}\n\nfunction mouseout() {\n  if (this.toast) {\n    this.toast.toast.container.displayGroup.removeAll();\n    this.toast.destroy();\n  }\n}\n\nNPC.prototype.show = function() {\n  var fadeInTween = this._game.add.tween(this);\n  var fadeIn = 200;\n  fadeInTween.to({alpha: 1}, fadeIn, Phaser.Easing.Linear.None, true);\n  this.inputEnabled = true;\n};\n\nNPC.prototype.hide = function() {\n  var fadeOutTween = this._game.add.tween(this);\n  var fadeOut = 200;\n  fadeOutTween.to({alpha: 0}, fadeOut, Phaser.Easing.Linear.None, true);\n  this.inputEnabled = false;\n};\n","/*\n * Placeable\n * ====\n *\n * A sample prefab (extended game object class), displaying an object in a room\n * (usually larger than a clickable) that can be clicked on to display a message,\n * but not added to the player's inventory.\n */\n\n'use strict';\n\nvar Toast = require('./Toast');\nvar items = require('../../static/assets/items.json');\n\nfunction Placeable(game, x, y, id, height, width) {\n  Phaser.Sprite.call(this, game, x, y, id);\n  this.height = height;\n  this.width = width;\n\n  this._game = game;\n  this.id = id;\n  this.name = items[id]['name'];\n  this.message = items[id]['message'];\n  this.anchor.set(0.5);\n  this.inputEnabled = true;\n  this.input.useHandCursor = true;\n  this.events.onInputDown.add(click, this);\n  this.events.onInputOver.add(mouseover, this);\n  this.events.onInputOut.add(mouseout, this);\n\n  this.input.pixelPerfectOver = true;   // checks pixels so that collision only happens with non-transparent areas\n                                        // computationally expensive, but maybe necessary for realism purposes?\n}\n\nfunction click() {\n  this._game.add.existing(new Toast(this._game, this.message, 5));\n}\n\nfunction mouseover() {\n  this._game.add.existing(this.toast = new Toast(this._game, this.name, 5));\n}\n\nfunction mouseout() {\n  if (this.toast) {\n    this.toast.toast.container.displayGroup.removeAll();\n    this.toast.destroy();\n  }\n}\n\nPlaceable.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Placeable.prototype.constructor = Placeable;","/*\n* Player\n* ====\n*\n* The player object class.\n*/\n\n'use strict';\n\nfunction Player(game) {\n  Phaser.Group.call(this, game);\n  this.inventory = [];\n  this.memoryBank = [];\n  this.seenAreas = []; //areas seen to track what can go in area transition window\n  this.variables = {};\n  this.currentRoom = null;\n  this.convoIdx = 0;\n  this.shownConvo = [];\n  this.convoFile = null;\n\n}\n\nPlayer.prototype = Object.create(Phaser.Group.prototype);\nmodule.exports = Player.prototype.constructor = Player;\n\nPlayer.prototype.serialize = function(game){\n  var fields = [\n    'inventory',\n    'memoryBank',\n    'seenAreas',\n    'variables'\n  ];\n\n  var obj = {};\n\n  for (let i in fields){\n    let field = fields[i];\n    obj[field] = this[field];\n  }\n  //since the room info contains all the objects in room, can I pop off there?\n  obj['currentRoom'] = game.room.area;\n  obj['convoIdx'] = game.dialogueWindow.convoManager.idx;\n  obj['shownConvo'] = game.dialogueWindow.convoManager.shown;\n  //since the convoFile is not stored in the game, we will just store it with the\n  //player whenever a new file is started.\n  //or we could store that also in the Dialogue manager??\n  obj['convoFile'] = game.dialogueWindow.convoFile;\n  return JSON.stringify(obj);\n};\n\nPlayer.unserialize = function(playerState, game){\n\n  if (typeof playerState === 'string'){\n    playerState = JSON.parse(playerState, (key, value) => {\n      return value;     // return the unchanged property value.\n    });\n  }\n\n  game.player = game.add.existing(new Player(game));\n\n  for (let field in playerState){\n    game.player[field] = playerState[field];\n  }\n\n};\n","/*\n * Room\n * ====\n *\n * A sample prefab (extended game object class), displaying a room background.\n */\n\n'use strict';\n\nvar Clickable = require('../objects/Clickable');\nvar Placeable = require('../objects/Placeable');\nvar NPC = require('../objects/NPC');\nvar areas = require('../../static/assets/areas.json');\n\nfunction Room(game, room) {\n  this._game = game;\n  this.name = room;\n\n  this.area = areas[room];\n  this.items = [];\n  this.placeables = [];\n  this.npcs = [];//how does this interact with the conversation manager?\n  //this is causing the glitch where the room blinks on load\n  //though even a new game blinks\n  Phaser.Sprite.call(this, game, game.world.centerX, game.world.centerY, this.area['bg']);\n  this.anchor.set(0.5);\n\n}\n\nRoom.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = Room.prototype.constructor = Room;\n\nRoom.prototype.addItems = function() {\n  //would prefer this in load areas TODO restructure\n  if (typeof this._game.music !== 'undefined' && this._game.music !== null)\n    this._game.music.fadeOut(1000); // fade out previous music\n  this._game.music = this._game.sound.play(this.area.music);\n  this._game.music.loopFull(1);\n\n  for (var i = 0; i < this.area['items'].length; i++) {\n    var item = this.area['items'][i];\n    this._game.add.existing(item = new Clickable(this._game, item['x'], item['y'], item['id'], item['height'], item['width']));\n    this.items.push(item);\n  }\n  for (i = 0; i < this.area['placeables'].length; i++) {\n    var placeable = this.area['placeables'][i];\n    this._game.add.existing(placeable = new Placeable(this._game, placeable['x'], placeable['y'], placeable['id'], placeable['height'], placeable['width']));\n    this.placeables.push(placeable);\n  }\n  for (i = 0; i < this.area['npcs'].length; i++) {\n    var npc = this.area['npcs'][i];\n\n    var showNPC = true;       // check to see if NPC meets conditions to be shown in this area\n    if ('showif' in npc) {\n      for (var condition in npc['showif']) {\n        if (this._game.player.variables[condition] != npc['showif'][condition]) {\n          showNPC = false;\n        }\n      }\n    }\n    if (!showNPC) {\n      continue; // if NPC doesn't meet conditions to be shown, skip them\n    }\n    this._game.add.existing(npc = new NPC(this._game, npc['x'], npc['y'], npc['id'], npc['height'], npc['width']));\n    if (npc.conv === this._game.player.convoFile){\n      npc.alpha = 0;\n    }\n    // if we want to re-enter a room and talk to a character again\n    // then we don't want to pop them off of the stack\n    this.npcs.push(npc);\n  }\n  this._game.world.bringToTop(this._game.slickUI.container.displayGroup);\n};\n\nRoom.prototype.clearItems = function() {\n  for (var i = 0; i < this.items.length; i++) {\n    this.items[i].destroy();\n  }\n  for (i = 0; i < this.placeables.length; i++) {\n    this.placeables[i].destroy();\n  }\n  for (i = 0; i < this.npcs.length; i++) {\n    this.npcs[i].destroy();\n  }\n  this.items = [];\n  this.placeables = [];\n  this.npcs = [];\n};\n\nRoom.prototype.loadArea = function(area) {\n  this.area = areas[area];\n\n  //below should track areas seen so that when area transition is pressed\n  //it will update with what the specific player has access to.\n  if (!this._game.player.seenAreas.includes(area)){\n    this._game.player.seenAreas.push(area);\n  }\n  this.name = area;\n  this._game.camera.fade('#000000', 2000);\n  this._game.camera.onFadeComplete.addOnce(function() {\n    this.clearItems();\n    this._game.camera.flash('#000000', 2000);\n    this.loadTexture(this.area['bg']);\n    this.addItems();\n  }, this);\n};\n","/*\n * SaveButton\n * ====\n * Save button, flush player Object to local store.\n *\n */\n\n'use strict';\n\nvar Toast = require('./Toast');\n\nfunction SaveButton(game) {\n  Phaser.Sprite.call(this, game, 20, 20, 'saveButton');\n  this.height = 30;\n  this.width = 50;\n\n  this._game = game;\n  this.id = 'saveButton';\n  this.name = 'Save Button';\n  this.anchor.set(0.5);\n  this.alpha = 0.5;\n  this.inputEnabled = true;\n  this.input.useHandCursor = true;\n  this.events.onInputDown.add(click, this);\n  this.events.onInputOver.add(mouseover, this);\n  this.events.onInputOut.add(mouseout, this);\n}\n\nfunction click() {\n  this._game.sound.play('save-notification');\n  this._game.add.existing(new Toast(this._game, 'Game Saved!', 5));\n  this._game.dialogueWindow.display(true); // refresh dialogue display\n  var saveString = this._game.player.serialize(this._game);\n  localStorage.setItem('playerState', saveString);\n}\n\nfunction mouseover() {\n  this.alpha = 1;\n  this._game.add.existing(this.toast = new Toast(this._game, this.name, 5));\n}\n\nfunction mouseout() {\n  if (this.toast) {\n    this.toast.toast.container.displayGroup.removeAll();\n    this.toast.destroy();\n  }\n}\n\nSaveButton.prototype = Object.create(Phaser.Sprite.prototype);\nmodule.exports = SaveButton.prototype.constructor = SaveButton;\n","/*\n * Scrollbar\n * =========\n *\n * Bitmap scrollbar that follows a set of given points.\n */\n\n'use strict';\n\nmodule.exports = Scrollbar;\n\nfunction Scrollbar(game, x, y, uiParent, points, maxScroll, lineWidth = 2, scrollbarWidth = 6) {\n  Phaser.Group.call(this, game/*, ...args*/);\n\n  this._game = game;\n  // Dispatch signals; others may attach events to these signals\n  this.onDragStart = new Phaser.Signal();\n  this.onDrag = new Phaser.Signal();\n  this.onDragStop = new Phaser.Signal();\n  this.onSetValue = new Phaser.Signal();\n\n  // Initial value\n  this._value = 0;\n  // How wide is our scrollbar?\n  this._scrollbarWidth = scrollbarWidth;\n  // How many pixels down can we scroll?\n  this._maxScroll = maxScroll;\n  // Determines path of scrollbar, as well as bounds\n  this.points = points;\n\n  // Draw bitmap path\n  this.maxWidth = Math.max(...this.points.x);\n  this.maxHeight = Math.max(...this.points.y);\n\n  var bmdPath = this._game.make.bitmapData(this.maxWidth + lineWidth, this.maxHeight + lineWidth);\n  var interpInc = 1 / this.maxHeight;\n  for (var i = 0; i < 1; i += interpInc) {\n    var px = this._game.math.linearInterpolation(this.points.x, i);\n    var py = this._game.math.linearInterpolation(this.points.y, i);\n    bmdPath.rect(px, py, lineWidth, lineWidth, '#48f2ff');\n  }\n\n  this.scrollbarLine = new SlickUI.Element.DisplayObject(\n    x, y, this._game.make.sprite(0,0, bmdPath));\n\n  // Draw scrollbar\n  this._scrollbarRatio = (this.maxHeight + this._scrollbarWidth - this._maxScroll) / this.maxHeight;\n\n  // Bitmap data for scrollbar\n  this._bmdScroll = this._game.make.bitmapData(\n    this.maxWidth + this._scrollbarWidth, \n    this.maxHeight + this._scrollbarWidth);\n\n  for (i = 0; i < this._scrollbarRatio; i += interpInc) {\n    px = this._game.math.linearInterpolation(points.x, i);\n    py = this._game.math.linearInterpolation(points.y, i);\n    this._bmdScroll.rect(px, py, this._scrollbarWidth, this._scrollbarWidth, '#48f2ff');\n  }\n  var scrollbarSprite = this._game.make.sprite(0,0, this._bmdScroll);\n  this.scrollbar = new SlickUI.Element.DisplayObject(\n    x-this._scrollbarWidth/2, \n    y-this._scrollbarWidth/2, \n    scrollbarSprite);\n\n  // Display events\n  scrollbarSprite.inputEnabled = true;\n  scrollbarSprite.input.useHandCursor = true;\n  \n  // Handle mouse input\n  scrollbarSprite.events.onInputDown.add(function (sprite, pointer) {\n    this._dragging = true;\n    this._dragPoint = pointer.y;\n    this._dragValue = this._value;\n\n    this.onDragStart.dispatch(this._value);\n  }, this);\n  scrollbarSprite.events.onInputUp.add(function () {\n    this._dragging = false;\n\n    this.onDragStop.dispatch(this._value);\n  }, this);\n\n  this._game.input.addMoveCallback(function (pointer, pointerX, pointerY) {\n    if (!this._dragging)\n      return;\n\n    // Measure scroll relative to dragPoint\n    var start = this._dragPoint - this._dragValue*this._maxScroll;\n    var clampedDelta = Math.min(Math.max(0, pointerY - start), this._maxScroll);\n\n    // Update value\n    this._value = (1/this._maxScroll)*clampedDelta;\n\n    // Redraw bitmap to update sprite\n    this.redraw();\n\n    this.onDrag.dispatch(this._value);\n    \n  }, this);\n\n  // Add to SlickUI parent\n  uiParent.add(this.scrollbarLine);\n  uiParent.add(this.scrollbar);\n  \n}\nScrollbar.prototype = Object.create(Phaser.Group.prototype);\nScrollbar.prototype.constructor = Scrollbar;\n\nScrollbar.prototype.redraw = function () {\n  this._bmdScroll.clear();\n  // Redraw bitmap to update sprite\n  var startBitmap = this._value*this._maxScroll / this.maxHeight;\n  var interpInc = 1/this.maxHeight;\n  for (var i = startBitmap; i < startBitmap + this._scrollbarRatio; i += interpInc) {\n    var px = this._game.math.linearInterpolation(this.points.x, i);\n    var py = this._game.math.linearInterpolation(this.points.y, i);\n    this._bmdScroll.rect(px, py, this._scrollbarWidth, this._scrollbarWidth, '#48f2ff');\n  }\n};\n\nScrollbar.prototype.destroy = function () {\n  // if display container exists (i.e. not destroyed)\n  if (typeof this.scrollbarLine.container !== 'undefined' && this.scrollbarLine.container !== null) {\n    this.scrollbarLine.container.displayGroup.removeAll(true);\n    this.scrollbarLine.container.displayGroup.destroy();\n    this.scrollbarLine.container = undefined;\n  }\n  \n  if (typeof this.scrollbar.container !== 'undefined' && this.scrollbar.container !== null) {\n    this.scrollbar.container.displayGroup.removeAll(true);\n    this.scrollbar.container.displayGroup.destroy();\n    this.scrollbar.container = undefined;\n  }\n  this.scrollbarLine.sprite = undefined;\n  this.scrollbar.sprite = undefined;\n};\n\nScrollbar.prototype.update = function () {\n  // TODO: Stub.\n};\n\n/** Explicitly define setters and getters */\n// value\nObject.defineProperty(Scrollbar.prototype, 'value', {\n  get: function () {\n    return this._value;\n  },\n  set: function (value) {\n    this._value = Math.min(Math.max(0, value), 1);\n    this.redraw();\n    this.onSetValue.dispatch(this._value);\n  }\n});\n","'use strict';\n\nvar Card = require('./Card');\nvar tactics = require('../../static/assets/tactics.json');\n\nfunction Tactic(game, x, y, assetName, multiUse = false) {\n  Card.call(this, game, x, y, assetName, multiUse);\n}\n\nTactic.prototype = Object.create(Card.prototype);\nmodule.exports = Tactic.prototype.constructor = Tactic;\n\n/* BEGIN OVERRIDE FUNCTIONS */\nTactic.prototype.getName = function () {\n  return tactics[this.key]['name'];\n};\n\nTactic.prototype.getDescription = function () {\n  return tactics[this.key]['desc'];\n};\n/* END OVERRIDE FUNCTIONS */","/*\n * Toast\n * ====\n *\n * A sample prefab (extended game object class), displaying a toast (popup at top of game screen) that displays\n * text and disappears after several seconds.\n */\n\n'use strict';\n\nvar textstyles = require('../../static/assets/textstyles.json');\n\nfunction Toast(game, message, timeout) {\n  Phaser.Group.call(this, game);\n\n  this._game = game;\n  this.message = message;\n  this.timeout = timeout;\n\n  if (game.toast) {\n    game.toast.toast.container.displayGroup.removeAll();\n    game.toast.destroy();\n  }\n\n  // private members specifying margin and padding\n  this.toastTextY = 16;\n\n  this.toastHeight = game.height * 1/12;\n  this.toastWidth = game.width * 1/2;\n\n  this.toastX = game.width * 1/2 - this.toastWidth * 1/2;\n  this.toastY = 8;\n\n  game.slickUI.add(this.toast = new SlickUI.Element.DisplayObject(\n    this.toastX, this.toastY, game.make.sprite(0, 0, 'toast'),\n    this.toastWidth, this.toastHeight));\n  this.toast.displayObject.width = this.toastWidth;\n  this.toast.displayObject.height = this.toastHeight;\n\n  game.toast = this;\n\n  this.toast.add(\n    this.toastText = new SlickUI.Element.DisplayObject(0, 0, \n      game.make.text(0, this.toastTextY, message, textstyles['toast']))\n  );\n  this.toastText.displayObject.setTextBounds(0, this.toastTextY, this.toastWidth, this.toastHeight);\n\n  this.toast.alpha = 0.8;\n\n  game.time.events.add(Phaser.Timer.SECOND * timeout, destroyPopup, this);\n}\n\nfunction destroyPopup() {\n  this.toast.container.displayGroup.removeAll();\n  this.destroy();\n}\n\nToast.prototype = Object.create(Phaser.Group.prototype);\nmodule.exports = Toast.prototype.constructor = Toast;","'use strict';\n\nvar Card = require('../objects/Card');\nvar Tactic = require('../objects/Tactic');\nvar Argument = require('../objects/Argument');\nvar items = require('../../static/assets/items.json');\nvar Player = require('../objects/Player');\nvar Room = require('../objects/Room');\n\nvar BattleUi = require('../objects/BattleUi.js');\nvar ArgumentManager = require('../objects/ArgumentManager');\nvar DialogueWindow = require('../objects/DialogueWindow');\nvar CustomActions = require('../utils/CustomActions');\n\nexports.preload = function(game) {\n  // preload all UI menu themes.\n  game.slickUI.load('ui/kenney-theme/kenney.json');\n};\n\nexports.create = function (game) {\n  if (game.player === null || typeof game.player === 'undefined') {\n    game.player = game.add.existing(new Player(game));\n    // DUMMY DATA\n    game.player.inventory.push('listener');\n    game.player.inventory.push('note');\n    game.room = (new Room(game, 'hangar'));\n    // END DUMMY DATA\n  }\n  // Companions\n  game.companions = ['Mysterious Voice', 'Kismet'];  // DUMMY DATA\n\n  // Music\n  if (typeof game.music !== 'undefined' && game.music !== null)\n    game.music.fadeOut(1000); // fade out previous music\n\n  game.argumentManager = new ArgumentManager(game);\n  var customActions = new CustomActions(game);\n  game.argumentManager = new ArgumentManager(game, customActions);\n\n  game.argumentManager.loadJSONConversation('battle01');\n  game.currentArgument = 0;\n  game.playerTurn = true;\n  game.cred = 4;\n  game.persuasion = 5;\n  game.turnCount = 0;\n\n  // adding in player cards and face\n  game.playerDeck = [];\n  for (var i = 0; i < game.player.inventory.length; i++) {\n    game.playerDeck.push(new Card(game, 0,0, items[game.player.inventory[i]]['id']));\n  }\n\n  // adding opponent face and opponent cards --to do: fetch these from main game state\n  game.opponentDeck = [];\n  game.args = game.argumentManager.getAllArguments();\n  for (i = 0; i < game.args.length; i++) {\n    // TODO: support for multiple counters\n    if ('bluff' in game.args[i] && game.args[i]['bluff'] === true) {\n      // do not include bluffs\n      continue;\n    }\n    if (game.args[i]['counters'].length <= 0)\n      continue;\n    game.opponentDeck.push(new Argument(game, 0,0, game.args[i]['id'], game.args[i]['counters'][0], i));\n  }\n\n  game.battleUi = new BattleUi(game, game.playerDeck, game.opponentDeck);\n  game.battleUi.cardSignal.add(cardAction, this);\n  game.battleUi.companionSignal.add(companionText, this);\n\n  game.dialogueWindow = new DialogueWindow(game, game.argumentManager);\n  startLogicBattle(game);\n};\n\nfunction startLogicBattle(game) {\n  // Load JSON\n  game.dialogueWindow.loadJSONConversation('battle01');\n\n  // Play intro sequence and display\n  game.argumentManager.startSpecialArgument('intro');\n  game.dialogueWindow.display();\n\n  // Disable and then reenable input\n  game.battleUi.cardsInputEnabled(false);\n  game.argumentManager.specialCompleteSignal.add(function () {\n    /* Fun intro display stuff */\n    // Display overlay and intro text\n    var introTween = game.battleUi.introTweens();\n    introTween.onComplete.add(function () {\n      game.battleUi.battleStart();  // enable cards and reveal current arg\n      game.dialogueWindow.display();\n   \n      // Start music\n      game.music = game.sound.play('off-limits');\n      game.music.fadeIn(1000);\n      game.music.loopFull(1);\n    });\n\n    game.argumentManager.specialCompleteSignal.removeAll();\n  });\n\n  game.turnCount = 1;\n}\n\nfunction cardAction(game, card) {\n  if (game.playerTurn) {\n    game.dialogueWindow.skipText();\n\n    game.playerTurn = false;\n    game.battleUi.cardsInputEnabled(false);\n\n    var argument = game.opponentDeck[game.currentArgument];\n\n    var isCorrect = card.key === argument.key;\n\n    if (isCorrect) {\n\n      game.battleUi.playCardAnimation(card, argument, true);\n      game.opponentDeck[game.currentArgument] = undefined;\n      argument.destroy();\n      if (!card.multiUse) {\n        card.destroy();\n      }\n        \n    } else {\n      game.battleUi.playCardAnimation(card, argument, false);\n\n    }\n\n    var textType = isCorrect ? 'correct' : 'incorrect';\n\n    game.battleUi.cardAnimCompleteSignal.add(argumentInterlude, this, game, textType);\n  }\n}\n\nfunction companionText(game, speaker) {\n  if (game.playerTurn) {\n    game.dialogueWindow.skipText();\n    game.battleUi.cardsInputEnabled(false);\n\n    game.argumentManager.startInterlude(speaker);\n    game.dialogueWindow.display();\n\n    game.argumentManager.interludeCompleteSignal.add(function () {\n      game.battleUi.cardsInputEnabled(true);\n      game.dialogueWindow.display();\n      game.argumentManager.interludeCompleteSignal.removeAll();\n    });\n  }\n}\n\nfunction argumentInterlude(game, type) {\n  game.argumentManager.startInterlude(type);\n  game.dialogueWindow.display();\n  game.argumentManager.interludeCompleteSignal.add(function () {\n    opponentTurn(game);\n    game.argumentManager.interludeCompleteSignal.removeAll();\n  });\n\n  game.battleUi.cardAnimCompleteSignal.removeAll();\n}\n\nfunction gleamingShoalBluff(game) {\n  game.argumentManager.startSpecialArgument('ability', 'bluff');\n  game.dialogueWindow.display();\n\n  // special bluff. hard-coded.\n  var lastArgument = game.opponentDeck.pop();\n  for (var i = 0; i < game.args.length; i++) {\n    if ('bluff' in game.args[i] && game.args[i]['bluff'] === true) {\n      // TODO: use Mersenne-Twister for more randomness\n      var randPosition = Math.random();\n      var newBluff = new Argument(game, 0,0, game.args[i]['id'], game.args[i]['counters'][0], i);\n      if (randPosition > 0.5) {\n        game.opponentDeck.unshift(newBluff);\n      } else {\n        game.opponentDeck.push(newBluff);\n      }\n    }\n  }\n  // add last argument to the end.\n  game.opponentDeck.push(lastArgument);\n}\n\nfunction giveCallBluffTactic(game) {\n  // Give player a special Call Bluff tactic.\n  var callBluff = new Tactic(game, 0, 0, 'call-bluff', true /* multiUse */);\n  game.playerDeck.push(callBluff);\n  game.battleUi.makeCardIcon(callBluff);\n}\n\n/** TODO: HARDCODED SPECIAL ACTIONS = AWFUL */\nfunction checkSpecialActions(game) {\n  return game.turnCount === 2;\n}\nfunction specialActions(game) {\n  if (game.turnCount === 2) {\n    // on the second turn, bluff\n    gleamingShoalBluff(game); // adds arguments into model\n    // when we finish the ability text...\n    game.argumentManager.specialCompleteSignal.add(function () {\n      // shuffle\n      var rouletteTween = game.battleUi.rouletteArguments();\n      rouletteTween.onComplete.add(function () {\n        // add arguments into ui view\n        updateCurrentArgument(game);\n        game.battleUi.updateArguments(game.opponentDeck, game.currentArgument);\n        game.battleUi.positionArguments(game);\n        game.battleUi.argAnimCompleteSignal.add(function () {\n          finishOpponentTurn(game);\n          giveCallBluffTactic(game);\n          game.battleUi.argAnimCompleteSignal.removeAll();\n        });\n      }, this);\n      game.argumentManager.specialCompleteSignal.removeAll();\n    });\n    \n    return true;\n  }\n  // TODO: randomly entrench or shuffle\n  if (game.turnCount > 2) {\n    // do nothing for now.\n    return false;\n  }\n}\n\nfunction opponentTurn(game) {\n  game.turnCount++;\n\n  if (game.opponentDeck[game.currentArgument] === undefined) {\n    game.persuasion -= 1;\n    game.battleUi.updatePersuasionBar();    \n  } else if (game.opponentDeck[game.currentArgument]) {\n\n    game.cred -= 1;\n    game.battleUi.updateCredBar(game.cred, true); // update cred bar with damage indication\n  } else {\n    game.persuasion -= 1;\n    game.battleUi.updatePersuasionBar();\n  }\n\n  updateCurrentArgument(game);\n  game.battleUi.updateArguments(game.opponentDeck, game.currentArgument);\n  game.battleUi.positionArguments(game, true);\n  // Display arguments on animation completion\n  game.battleUi.argAnimCompleteSignal.add(function () {\n    var hasSpecialAction = checkSpecialActions(game);\n    if (hasSpecialAction) {\n      game.battleUi.argAnimCompleteSignal.removeAll();\n      specialActions(game);\n      return;\n    }\n    finishOpponentTurn(game);\n    game.battleUi.argAnimCompleteSignal.removeAll();\n  }, this);\n\n}\n\nfunction finishOpponentTurn(game) {\n  // upon finishing argument positioning\n  // reveal current argument\n  game.battleUi.revealCurrent();\n\n  // reenable player input and start player turn\n  updateArgumentWindow(game);\n  game.battleUi.positionCards();\n  game.battleUi.cardsInputEnabled(true);\n  game.playerTurn = true;\n}\n\n// For ArgumentManager\nfunction currentArgumentJsonIdx(game) {\n  var currentArgument = game.opponentDeck[game.currentArgument];\n  if (!currentArgument)\n    return -1;\n  return currentArgument.jsonIdx;\n}\n\nfunction updateArgumentWindow(game) {\n  game.argumentManager.advanceToTarget(currentArgumentJsonIdx(game));\n  if(game.cred === 0) {\n    game.argumentManager.startSpecialArgument('lose');\n  }\n  if(game.persuasion === 0) {\n    game.argumentManager.startSpecialArgument('win');\n  }\n  game.dialogueWindow.display();\n}\n\nfunction updateCurrentArgument(game) {\n  game.currentArgument += 1;\n\n  for (var i = 0; i < game.opponentDeck.length; i++) {\n    var idx = game.currentArgument + i;\n    if (idx >= game.opponentDeck.length)\n      idx -= game.opponentDeck.length;\n    // if exists\n    if (typeof game.opponentDeck[idx] !== 'undefined' && game.opponentDeck[idx] !== null) {\n      game.currentArgument = idx;\n      return;\n    }\n  }\n  // exiting means we have no more arguments\n}\n","/*\n * Boot state\n * ==========\n *\n * The first state of the game, responsible for setting up some Phaser\n * features. Adjust the game appearance, number of input pointers, screen\n * orientation handling etc. using this game state.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\nexports.preload = function (game) {\n  // Point the Phaser Asset Loader to where your game assets live.\n  game.load.path = 'assets/';\n\n  // Initialize physics engines here. Remember that Phaser builds including\n  // Arcade Physics have it enabled by default.\n  //game.physics.startSystem(Phaser.Physics.P2);\n\n  // Adjust how many pointers Phaser will check for input events.\n  game.input.maxPointers = 2;\n\n  // Set the alignment of the game canvas within the page.\n  game.scale.pageAlignHorizontally = true;\n\n  // Adjust the scaling mode of the game canvas.\n  // Example: If you're developing a pixel-art game, set it to 'USER_SCALE'.\n  game.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;\n\n  // When using 'USER_SCALE' scaling mode, use this method to adjust the\n  // scaling factor.\n  //game.scale.setUserScale(2);\n\n  // Uncomment the following line to adjust the rendering of the canvas to\n  // crisp graphics. Great for pixel-art!\n  //Phaser.Canvas.setImageRenderingCrisp(game.canvas);\n\n  // Uncomment this line to disable smoothing of textures.\n  //game.stage.smoothed = false;\n\n  // If the game canvas loses focus, keep the game loop running.\n  game.stage.disableVisibilityChange = true;\n\n  // Whether to use frame-based interpolations or not.\n  game.tweens.frameBased = false;\n\n  // Load the graphical assets required to show the splash screen later,\n  // using the asset pack data.\n  game.load.pack('boot', null, assets);\n};\n\nexports.create = function (game) {\n  // After applying the first adjustments and loading the splash screen\n  // assets, move to the next game state.\n  game.state.start('Preloader');\n};\n","/*\n* Credits state\n* =============\n*\n* The player should be able to return to the main menu.\n*\n*/\n\n'use strict';\n\nexports.init = function() {\n  this.description = 'Congratulations! You\\'ve reached the end of our playable demo. \\\n  We hope you enjoyed the first chapter of Quasaria as much as we enjoyed making it!';\n  this.credits = 'Developed by:\\nAlexandros Christodoulou-Rubalcava\\nHana Lee\\nAmber Thomas\\nEdward Wang';\n};\n\nexports.create = function (game) {\n  this.camera.flash('#000000', 2000);\n\n  //might not be in quotes, its an issue below\n  var screen = game.add.sprite(game.world.centerX, game.world.centerY, 'menu_screen');\n  screen.anchor.setTo(0.5, 0.5);\n\n  let screenFont = 'Cinzel Decorative';\n  let fillColor = '#42dff4';\n\n  var descText = game.add.text(game.world.centerX, game.world.centerY - 100, this.description, {\n    font: '16px ' + screenFont,\n    fill: fillColor,\n    align: 'center',\n    wordWrap: true,\n    wordWrapWidth: game.width - 300\n  });\n\n  var creditsText = game.add.text(game.world.centerX, game.world.centerY + 120, this.credits, {\n    font: '16px ' + screenFont,\n    fill: fillColor,\n    align: 'center',\n    wordWrap: true,\n    wordWrapWidth: game.width - 300\n  });\n\n  var mainMenuText = game.add.text(game.world.centerX, game.world.centerY, 'Main Menu', {\n    font: '50px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  descText.anchor.setTo(0.5, 0.5);\n  creditsText.anchor.setTo(0.5, 0.5);\n\n  mainMenuText.anchor.setTo(0.5, 0.5);\n  mainMenuText.inputEnabled = true;\n  mainMenuText.events.onInputOver.add(function() {\n    mainMenuText.fill = '#ff00ff';\n  }, this);\n\n  mainMenuText.events.onInputOut.add(function() {\n    mainMenuText.fill = '#42dff4';\n  }, this);\n\n  mainMenuText.events.onInputDown.add(function () {\n    game.state.start('MainMenu');\n  }, this);\n\n};\n","/*\n* Game state\n* ==========\n*\n* A sample Game state, displaying the Phaser logo.\n*/\n\n'use strict';\n\nvar Room = require('../objects/Room');\nvar Player = require('../objects/Player');\nvar DialogueWindow = require('../objects/DialogueWindow');\nvar ConversationManager = require('../objects/ConversationManager');\nvar CustomActions = require('../utils/CustomActions');\nvar MemoryBankWindow = require('../objects/MemoryBankWindow');\nvar AreaTransitionWindow = require('../objects/AreaTransitionWindow');\nvar SaveButton = require('../objects/SaveButton');\n\nexports.preload = function(game) {\n  // preload all UI menu themes.\n  game.slickUI.load('ui/kenney-theme/kenney.json');\n};\n\nexports.init = function(game, resumeGame, fromBattle){\n\n  let playerState = localStorage.getItem('playerState');\n  if (fromBattle) {\n    game.room = new Room(game, 'hangar');  \n  } else if (resumeGame && playerState !== null){\n    Player.unserialize(playerState, game);\n    //current room is actually room.area\n    //need to deep copy, otherwise we will loose the area info\n    var area = JSON.parse(JSON.stringify(game.player.currentRoom));\n    game.room = (new Room(game, area.id));\n    game.room.area = area;\n\n  } else { //check if old model blinks\n    localStorage.clear();\n    game.player = (new Player(game));\n    // game.player.variables['debug'] = 'true';    // comment this out to get rid of DEBUG - SKIP TO END conversation options\n    game.player.convoFile = 'prologue01';\n    game.room = (new Room(game, 'shuttle'));\n\n  }\n\n};\n\nexports.create = function (game) {\n\n  this.camera.flash('#000000', 2000);\n  game.add.existing(game.player);\n\n  game.add.existing(game.room);\n  game.room.addItems();\n\n\n  // we previously had music in the game state, but I move it to the room object\n  // so that we can have different themes for different rooms\n  // need to set the music in the other states like logic battles\n\n  game.add.existing(new SaveButton(game));\n\n  // custom actions for conversations\n  var customActions = new CustomActions(game);\n  // conversation manager\n  var convoManager = new ConversationManager(game, customActions);\n  convoManager.idx = game.player.convoIdx;\n  convoManager.shown = game.player.shownConvo;\n\n  // dialogue window object\n  game.dialogueWindow = new DialogueWindow(game, convoManager);\n  // memory bank window object\n  game.memoryBankWindow = new MemoryBankWindow(game);\n  // area transition window object\n  game.areaTransitionWindow = new AreaTransitionWindow(game);\n\n  game.dialogueWindow.begin(game.player.convoFile);\n\n};\n","/*\n* Game Over state\n* ===============\n*\n* The player should be able to restart a saved game or return to the main menu..\n*\n*/\n\n'use strict';\n\nexports.init = function(game, gameOverText) {\n  this.gameOverText = gameOverText;\n};\n\nexports.create = function (game) {\n  this.camera.flash('#000000', 2000);\n\n  if (typeof game.music !== 'undefined' && game.music !== null)\n    game.music.fadeOut(1000); // fade out previous music\n  game.music = game.sound.play('cold-moon');\n  game.music.loopFull(1);\n  //might not be in quotes, its an issue below\n  var screen = game.add.sprite(game.world.centerX, game.world.centerY, 'menu_screen');\n  screen.anchor.setTo(0.5, 0.5);\n\n  let screenFont = 'Cinzel Decorative';\n  let fillColor = '#42dff4';\n\n  var titleText = game.add.text(game.world.centerX, game.world.centerY- 85, 'Game Over', {\n    font: '75px ' + screenFont,\n    fontWeight: 'bold',\n    fill: fillColor,\n    align: 'center'\n  });\n\n  var descText = game.add.text(game.world.centerX, game.world.centerY - 20, this.gameOverText, {\n    font: '25px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  var contText = game.add.text(game.world.centerX, game.world.centerY + 30, 'Reload', {\n    font: '50px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  var mainMenuText = game.add.text(game.world.centerX, game.world.centerY + 85, 'Main Menu', {\n    font: '50px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  titleText.anchor.setTo(0.5, 0.5);\n\n  descText.anchor.setTo(0.5, 0.5);\n\n  contText.anchor.setTo(0.5, 0.5);\n  contText.inputEnabled = true;\n  contText.events.onInputOver.add(function() {\n    contText.fill = '#ff00ff';\n  }, this);\n\n  contText.events.onInputOut.add(function() {\n    contText.fill = '#42dff4';\n  }, this);\n\n  contText.events.onInputDown.add(function () {\n    let resumeGame = true;\n    game.state.start('Game', true, false, game, resumeGame);\n  }, this);\n\n  mainMenuText.anchor.setTo(0.5, 0.5);\n  mainMenuText.inputEnabled = true;\n  mainMenuText.events.onInputOver.add(function() {\n    mainMenuText.fill = '#ff00ff';\n  }, this);\n\n  mainMenuText.events.onInputOut.add(function() {\n    mainMenuText.fill = '#42dff4';\n  }, this);\n\n  mainMenuText.events.onInputDown.add(function () {\n    game.state.start('MainMenu');\n  }, this);\n\n};\n","/*\n* Main Menu state\n* ===============\n*\n* The player should be able to restart a saved game or start a new game.\n*\n*/\n\n'use strict';\n\nexports.create = function (game) {\n\n  //might not be in quotes, its an issue below\n  game.music = game.sound.play('menu-theme-terraform');\n  game.music.loopFull(1);\n\n  var screen = game.add.sprite(game.world.centerX, game.world.centerY, 'menu_screen');\n  screen.anchor.setTo(0.5, 0.5);\n\n  var logo = game.add.sprite(game.world.centerX, game.world.centerY - 30, 'quasaria-logo-MM');\n  logo.anchor.setTo(0.5, 0.5);\n  logo.alpha = .1;\n\n  let screenFont = 'Cinzel Decorative';\n  let fillColor = '#42dff4';\n\n  var titleText = game.add.text(game.world.centerX, game.world.centerY- 75, 'Quasaria', {\n    font: '75px ' + screenFont,\n    fontWeight: 'bold',\n    fill: fillColor,\n    align: 'center'\n  });\n\n  var contText = game.add.text(game.world.centerX, game.world.centerY, 'Continue', {\n    font: '50px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  var newGameText = game.add.text(game.world.centerX, game.world.centerY + 55, 'New Game', {\n    font: '50px ' + screenFont,\n    fill: fillColor,\n    align: 'center'\n  });\n\n  titleText.anchor.setTo(0.5, 0.5);\n\n\n  contText.anchor.setTo(0.5, 0.5);\n  contText.inputEnabled = true;\n  contText.events.onInputOver.add(function() {\n    contText.fill = '#ff00ff';\n  }, this);\n\n  contText.events.onInputOut.add(function() {\n    contText.fill = '#42dff4';\n  }, this);\n\n  contText.events.onInputDown.add(function () {\n    let resumeGame = true;\n    game.state.start('Game', true, false, game, resumeGame);\n  }, this);\n\n  newGameText.anchor.setTo(0.5, 0.5);\n  newGameText.inputEnabled = true;\n  newGameText.events.onInputOver.add(function() {\n    newGameText.fill = '#ff00ff';\n  }, this);\n\n  newGameText.events.onInputOut.add(function() {\n    newGameText.fill = '#42dff4';\n  }, this);\n\n  newGameText.events.onInputDown.add(function () {\n    let resumeGame = false;\n    game.state.start('Game', true, false, game, resumeGame);\n  }, this);\n\n};\n","/*\n * Preloader state\n * ===============\n *\n * Takes care of loading the main game assets, including graphics and sound\n * effects, while displaying a busy splash screen.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\n\nfunction showSplashScreen (game) {\n  game.add.image(0, 0, 'splash-screen');\n  game.load.setPreloadSprite(game.add.image(82, 282, 'progress-bar'));\n}\n\nexports.preload = function (game) {\n  showSplashScreen(game);\n  game.load.pack('game', null, assets);\n  game.load.pack('main_menu', null, assets);\n  game.load.pack('ui', null, assets);\n  game.load.pack('conversations', null, assets);\n  game.load.pack('sounds', null, assets);\n  game.load.pack('logic_battle', null, assets);\n};\n\nexports.create = function (game) {\n  // Here is a good place to initialize plugins dependent of any game asset.\n  // Don't forget to `require` them first. Example:\n  //game.myPlugin = game.plugins.add(MyPlugin/*, ... parameters ... */);\n\n  // Slick UI initialization; added from index.html\n  // NOTE: slick UI loads theme from cache\n  // between preload and create functions FOR EACH STATE\n  game.slickUI = game.plugins.add(Phaser.Plugin.SlickUI);\n\n  game.state.start('MainMenu');\n\n};\n","/*\n * `states` module\n * ===============\n *\n * Declares all present game states.\n * Expose the required game states using this module.\n */\n\n'use strict';\n\nexports.Boot = require('./Boot');\nexports.Preloader = require('./Preloader');\nexports.MainMenu = require('./MainMenu');\nexports.Game = require('./Game');\nexports.Battleground = require('./Battleground');\nexports.GameOver = require('./GameOver');\nexports.Credits = require('./Credits');","/*\n * Custom Actions\n * ===================\n *\n * Stores code for custom actions to be taken during conversations.\n */\n\n'use strict';\n\nmodule.exports = CustomActions;\n\nfunction CustomActions(game/*, ...args*/) {\n  Phaser.Group.call(this, game/*, ...args*/);\n  this._game = game;\n}\n\nCustomActions.prototype = Object.create(Phaser.Group.prototype);\nCustomActions.prototype.constructor = CustomActions;\n\nCustomActions.prototype.customAction = function(action) {\n  if (action.startsWith('fadeInAndOut')) {\n    this.fadeInAndOut(parseInt(action.substring('fadeInAndOut'.length)));\n  } else if (action === 'startConv:prologue02') {\n    this._game.camera.fade('#000000', 2000);\n    this._game.camera.onFadeComplete.addOnce(function() {\n      this._game.camera.flash('#000000', 2000);\n      this.startConversation('prologue02');\n    }, this);\n  } else if (action.startsWith('moveToArea:')) {\n    this.moveToArea(action.substring('moveToArea:'.length));\n  } else if (action === 'startBattle') {\n    this.loadBattle();  \n  } else if (action === 'loadMainGameState') {\n    this._game.state.start('Game', true, false, this._game, false, true);\n  } else if (action.startsWith('gameover')) {\n    this._game.state.start('GameOver', true, false, this._game, action.substring('gameover'.length));\n  } else if (action === 'credits') {\n    this._game.state.start('Credits', true, false, this._game);\n  }\n};\n\n\n\n\nCustomActions.prototype.loadBattle = function() {\n  this._game.dialogueWindow.hide();\n  this._game.state.start('Battleground', true, false);\n};\n\nCustomActions.prototype.startConversation = function(conv) {\n  this._game.dialogueWindow.begin(conv);\n};\n\nCustomActions.prototype.moveToArea = function(area) {\n  this._game.room.loadArea(area);\n};\n\nCustomActions.prototype.fadeInAndOut = function(duration) {\n  this._game.camera.fade('#000000', duration/2);\n  this._game.dialogueWindow.avatar.visible = false;\n  this._game.dialogueWindow.dialogPanel.visible = false;\n  this._game.camera.onFadeComplete.addOnce(function() {\n    this._game.camera.flash('#000000', duration/2);\n    this._game.dialogueWindow.avatar.visible = true;\n    this._game.dialogueWindow.dialogPanel.visible = true;\n  }, this);\n};","module.exports={\n\t\"shuttle\": {\n\t\t\"id\": \"shuttle\",\n\t\t\"name\": \"Shuttle\",\n\t\t\"bg\": \"shuttle\",\n\t\t\"music\": \"puzzle2\",\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"id\": \"listener\",\n\t\t\t\t\"x\": 150,\n\t\t\t\t\"y\": 150,\n\t\t\t\t\"height\": 100,\n\t\t\t\t\"width\": 100\n\t\t\t}, {\n\t\t\t\t\"id\": \"note\",\n\t\t\t\t\"x\": 720,\n\t\t\t\t\"y\": 200,\n\t\t\t\t\"height\": 100,\n\t\t\t\t\"width\": 100\n\t\t\t}\n\t\t],\n\t\t\"placeables\": [],\n\t\t\"npcs\": [],\n\t\t\"navigable\": false,\n\t\t\"areaAccess\": []\n\t},\n\t\"hangar\": {\n\t\t\"id\": \"hangar\",\n\t\t\"name\": \"Hangar Bay\",\n\t\t\"bg\": \"hangar\",\n\t\t\"music\": \"lostjungle\",\n\t\t\"items\": [],\n\t\t\"placeables\": [\n\t\t\t{\n\t\t\t\t\"id\": \"shuttle-placeable\",\n\t\t\t\t\"x\": 475,\n\t\t\t\t\"y\": 300,\n\t\t\t\t\"height\": 300,\n\t\t\t\t\"width\": 401\n\t\t\t}\n\t\t],\n\t\t\"npcs\": [\n\t\t\t{\n\t\t\t\t\"id\": \"Vesper\",\n\t\t\t\t\"x\": 100,\n\t\t\t\t\"y\": 350,\n\t\t\t\t\"height\": 350,\n\t\t\t\t\"width\": 150\n\t\t\t}, {\n\t\t\t\t\"id\": \"Gleaming Shoal\",\n\t\t\t\t\"x\": 400,\n\t\t\t\t\"y\": 300,\n\t\t\t\t\"height\": 400,\n\t\t\t\t\"width\": 400,\n\t\t\t\t\"showif\": {\n\t\t\t\t\t\"xenopsychologist\": \"done\",\n\t\t\t\t\t\"xenobiologist\": \"done\"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"navigable\": true,\n\t\t\"areaAccess\": [\"medbay\"]\n\t},\n\t\"medbay\": {\n\t\t\"id\": \"medbay\",\n\t\t\"name\": \"Medical Bay\",\n\t\t\"bg\": \"medbay\",\n\t\t\"music\": \"puzzle1\",\n\t\t\"items\": [],\n\t\t\"placeables\": [],\n\t\t\"npcs\": [\n\t\t\t{\n\t\t\t\t\"id\": \"Dr. Talvine Mesmer-Quiverly\",\n\t\t\t\t\"x\": 320,\n\t\t\t\t\"y\": 340,\n\t\t\t\t\"height\": 183,\n\t\t\t\t\"width\": 100\n\t\t\t}, {\n\t\t\t\t\"id\": \"Dr. Valken\",\n\t\t\t\t\"x\": 600,\n\t\t\t\t\"y\": 250,\n\t\t\t\t\"height\": 330,\n\t\t\t\t\"width\": 112.5\n\t\t\t}\n\t\t],\n\t\t\"navigable\": true,\n\t\t\"areaAccess\": [\"hangar\"]\n\t}\n}\n","module.exports={\n\t\"listener\": {\n\t\t\"id\": \"listener\",\n\t\t\"url\": \"listener.png\",\n\t\t\"name\": \"Listener\",\n\t\t\"desc\": \"A small, pocket-sized blue orb that is normally cool to the touch, but warms when your mysterious rescuer uses it to communicate with you. He/she told you to keep this safe, and let no one know of its true purpose.\"\n\t},\n\t\"note\": {\n\t\t\"id\": \"note\",\n\t\t\"url\": \"note.png\",\n\t\t\"name\": \"Indecipherable Note\",\n\t\t\"desc\": \"A note covered in strange alien symbols. Your mysterious rescuer left this for you, saying it would help explain things, but so far you can't understand it.\"\n\t},\n\t\"shuttle-placeable\": {\n\t\t\"id\": \"shuttle-placeable\",\n\t\t\"url\": \"shuttle-placeable.png\",\n\t\t\"name\": \"My Shuttle\",\n\t\t\"message\": \"That's my shuttle, but I can't go in there right now.\"\n\t},\n\t\"biologistApproval\": {\n\t\t\"id\": \"biologistApproval\",\n\t\t\"url\": \"talvine.png\",\n\t\t\"name\": \"Dr. Talvine's Report\",\n\t\t\"desc\": \"A clean bill of health from Dr. Talvine Mesmer-Quiverly, Station Zero's xenobiologist.\"\n\t},\n\t\"psychologistApproval\": {\n\t\t\"id\": \"psychologistApproval\",\n\t\t\"url\": \"valken.png\",\n\t\t\"name\": \"Dr. Valken's Report\",\n\t\t\"desc\": \"A briefing on your psychological state from Dr. Valken, Station Zero's xenopsychologist.\"\n\t},\n\t\"secretaryNote\": {\n\t\t\"id\": \"secretaryNote\",\n\t\t\"url\": \"secretaryNote.png\",\n\t\t\"name\": \"Memo to Garnetta\",\n\t\t\"desc\": \"\\\"Garnetta: keep talking with Clearance staff. You won't be interrupted.\\\"\"\n\t}\n}","module.exports={\n\t\"Mysterious Voice\": {\n\t\t\"id\": \"Mysterious Voice\",\n\t\t\"name\": \"Mysterious Voice\",\n\t\t\"image\": \"mysterious-voice\",\n\t\t\"avatar\": \"mysterious-voice\",\n\t},\n\t\"Gleaming Shoal\": {\n\t\t\"id\": \"Gleaming Shoal\",\n\t\t\"name\": \"Gleaming Shoal\",\n\t\t\"image\": \"gleaming-shoal-npc\",\n\t\t\"avatar\": \"gleaming-shoal\",\n\t\t\"conv\": \"gleaming-shoal01\"\n\t},\n\t\"Unknown Alien\": {\n\t\t\"id\": \"Gleaming Shoal\",\n\t\t\"name\": \"Unknown Alien\",\n\t\t\"image\": \"unknown-alien\",\n\t\t\"avatar\": \"unknown-alien\"\n\t},\n\t\"Kismet\": {\n\t\t\"id\": \"Kismet\",\n\t\t\"name\": \"Kismet\",\n\t\t\"image\": \"kismet\",\n\t\t\"avatar\": \"kismet\"\n\t},\n\t\"Vesper\": {\n\t\t\"id\": \"Vesper\",\n\t\t\"name\": \"Vesper\",\n\t\t\"image\": \"vesper-npc\",\n\t\t\"avatar\": \"vesper\",\n\t\t\"conv\": \"vesper01\"\n\t},\n\t\"Dr. Talvine Mesmer-Quiverly\": {\n\t\t\"id\": \"Dr. Talvine Mesmer-Quiverly\",\n\t\t\"name\": \"Dr. Talvine\",\n\t\t\"image\": \"talvine-npc\",\n\t\t\"avatar\": \"talvine\",\n\t\t\"conv\": \"talvine01\"\n\t},\n\t\"Dr. Valken\": {\n\t\t\"id\": \"Dr. Valken\",\n\t\t\"name\": \"Dr. Valken\",\n\t\t\"image\": \"valken-npc\",\n\t\t\"avatar\": \"valken\",\n\t\t\"conv\": \"valken01\"\n\t}\n}","module.exports={\n\t\"call-bluff\": {\n\t\t\"id\": \"call-bluff\",\n\t\t\"url\": \"call-bluff.png\",\n\t\t\"name\": \"Call Bluff\",\n\t\t\"desc\": \"Your adversary is willing to make some bold claims to win this argument. Call out their unsubstantiated bluffs for what they are.\"\n\t}\n}","module.exports={\n\t\"speaker\": {\n\t\t\"font\": \"20px Goudy Bookletter 1911\", \n\t\t\"fill\": \"#48f2ff\", \n\t\t\"wordWrap\": false, \n\t\t\"align\": \"left\"\n\t},\n\t\"dialogueBody\": {\n\t\t\"font\": \"14px Open Sans\", \n\t\t\"fill\": \"#48f2ff\", \n\t\t\"wordWrap\": true, \n\t\t//\"wordWrapWidth\": \"this._dialogTextWidth\",\n\t\t\"align\": \"left\"\n\t},\n\t\"choiceButton\": {\n\t\t\"font\": \"14px Open Sans\",\n\t\t\"fill\": \"#48f2ff\", \n\t\t\"wordWrap\": true,\n\t\t//\"wordWrapWidth\": this._dialogTextWidth - buttonSidePadding, \n\t\t\"align\": \"left\"\n\t},\n\t\"toast\": {\n\t\t\"font\": \"14px Open Sans\",\n\t\t\"fill\": \"#48f2ff\",\n\t\t\"boundsAlignH\": \"center\"\n\t},\n\t\"credibility\": {\n\t\t\"font\": \"32px Cinzel Decorative\", \n\t\t\"fontWeight\": \"bold\",\n\t\t\"fill\": \"#48f2ff\", \n\t\t\"boundsAlignH\": \"center\", \n\t\t\"boundsAlignV\": \"middle\"\n\t},\n\t\"mainMenuTitle\": {\n\t\t\"font\": \"75px Cinzel Decorative\",\n\t\t\"fontWeight\": \"bold\",\n\t\t\"fill\": \"#42dff4\",\n\t\t\"align\": \"center\"\n\t}, \n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}